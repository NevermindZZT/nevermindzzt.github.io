<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Letter</title>
  
  <subtitle>Letter | Blog</subtitle>
  <link href="http://nevermindzzt.github.io/atom.xml" rel="self"/>
  
  <link href="http://nevermindzzt.github.io/"/>
  <updated>2022-02-27T10:53:36.664Z</updated>
  <id>http://nevermindzzt.github.io/</id>
  
  <author>
    <name>Letter</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>c语言上下文的快速切换</title>
    <link href="http://nevermindzzt.github.io/2020/12/27/c%E8%AF%AD%E8%A8%80%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2/"/>
    <id>http://nevermindzzt.github.io/2020/12/27/c%E8%AF%AD%E8%A8%80%E4%B8%8A%E4%B8%8B%E6%96%87%E7%9A%84%E5%BF%AB%E9%80%9F%E5%88%87%E6%8D%A2/</id>
    <published>2020-12-27T06:14:23.000Z</published>
    <updated>2022-02-27T10:53:36.664Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我们通常认为，在中断中，不能执行耗时的操作，否则会影响系统的稳定性，尤其对于嵌入式编程。对于带操作系统的程序而言，可以通过操作系统的调度，将中断处理分成两个部分，耗时的操作可以放到线程中去执行，但是对于没有操作系统的情况，又应该如何处理呢</p><p>比较常见的，我们可能会定义一些全局变量，作为<code>flag</code>，然后在<code>mainloop</code>中不停的判断这些<code>flag</code>，再在中断中修改这些<code>flag</code>，最后在<code>mainloop</code>中执行具体的逻辑，但是这样，无疑会增加耦合，增加程序维护成本</p><h2 id="cpost"><a href="#cpost" class="headerlink" title="cpost"></a>cpost</h2><p><a href="https://github.com/NevermindZZT/cpost">cpost</a>正是应用在这种情况下的一个简单但又十分方便的工具，它可以特别方便的进行上下文的切换，减少模块耦合</p><p><code>cpost</code>借鉴的Android的handler机制，通过在<code>mainloop</code>中跑一个任务，然后在其他地方，可以是中断，也可以是模块逻辑中，直接抛出需要执行的函数，使其脱离调用处的上下文，运行在<code>mainloop</code>中。<code>cpost</code>还支持延迟处理，可以指定函数在抛出后多久执行</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>cpost</code>的使用十分简单，这里以使用在嵌入式无操作系统中为例，主要用作中断延迟处理的情况</p><ol><li><p>配置系统tick</p><p> 配置<code>cpost.h</code>中的宏<code>CPOST_GET_TICK()</code>，配置成获取系统tick，以stm32 hal为例</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>     CPOST_GET_TICK()            HAL_GetTick()</span></span><br></pre></td></tr></table></figure></li><li><p>配置处理进程</p><p> 在<code>mainloop</code>调用<code>cpostProcess</code>函数</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        cpostProcess();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>抛出任务</p><p> 在中断等需要进行上下文切换的地方调用<code>cpsot</code>接口，使其在<code>mainloop</code>中运行</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cpost(intHandler);</span><br></pre></td></tr></table></figure></li></ol><h2 id="原理解析"><a href="#原理解析" class="headerlink" title="原理解析"></a>原理解析</h2><p><code>cpost</code>的原理其实很简单，其代码量也十分少，总共加起来就只有几十行代码，<code>cpost</code>维护了一个而全局的数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CpostHandler cposhHandlers[CPOST_MAX_HANDLER_SIZE] = &#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure><p>其中，数组的每一个元素表示包含了需要执行的函数和参数，当调用<code>cpost</code>接口时，被post的函数和参数会被保存在这个数组中，然后<code>mainloop</code>中运行的<code>cpostProcess</code>函数会遍历这个数组，当满足条件时，执行对应的函数，从而达到上下文切换的目的</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">cpostProcess</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; CPOST_MAX_HANDLER_SIZE; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (cposhHandlers[i].handler)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (cposhHandlers[i].time == <span class="number">0</span> || CPOST_GET_TICK() &gt;= cposhHandlers[i].time)</span><br><span class="line">            &#123;</span><br><span class="line">                cposhHandlers[i].handler(cposhHandlers[i].param);</span><br><span class="line">                cposhHandlers[i].handler = <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实，cpost的方式，和一开始提到的使用全局的flag进行上下文切换的方法很像，只不过，cpost通过一个数组的维护和直接post函数的方式，省去了维护flag的成本，也不需要将需要执行的函数耦合到mianloop中，从而变得简单易用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我们通常认为，在中断中，不能执行耗时的操作，否则会影响系统的稳定性，尤其对于嵌入式编程。对于带操作系统的程序而言，可以通过操作系统的调度，将</summary>
      
    
    
    
    <category term="C" scheme="http://nevermindzzt.github.io/categories/C/"/>
    
    
    <category term="嵌入式" scheme="http://nevermindzzt.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="STM32" scheme="http://nevermindzzt.github.io/tags/STM32/"/>
    
    <category term="C" scheme="http://nevermindzzt.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>C语言模块化编程的完美解耦</title>
    <link href="http://nevermindzzt.github.io/2020/12/20/C%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E8%80%A6/"/>
    <id>http://nevermindzzt.github.io/2020/12/20/C%E8%AF%AD%E8%A8%80%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E7%A8%8B%E7%9A%84%E5%AE%8C%E7%BE%8E%E8%A7%A3%E8%80%A6/</id>
    <published>2020-12-20T05:57:02.000Z</published>
    <updated>2022-02-27T10:53:36.651Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于模块化编程来说，如何实现各模块间的解耦一直是一个比较令人头疼的问题，特别是对于嵌入式编程，由于控制逻辑复杂，并且对程序体积有控制，经常容易写出各独立模块之间相互调用的问题。由此，<a href="https://github.com/NevermindZZT/cpost">cpost</a>中的<code>cevent组件</code>，通过模仿Android系统中的广播机制，提供了一种非常简单的模块间解耦实现</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><code>cevent</code>借鉴的是Android系统的广播机制，一方面，各模块在工作的时候，都会有多个具体的事件点，在高耦合的编程中，可能会在这些地方调用其他模块的功能，比如说，在通信模块接收到指令的时候，需要闪烁一下指示灯</p><p>使用<code>cevent</code>，我们可以在这些地方抛出一个事件，当前模块不需要关心在这各地方需要执行哪些其他模块的逻辑，由其他模块，或者用户定义一个事件监听，当具体的事件发生时，执行相应的动作</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><code>cevent</code>使用注册的方式监听事件，会依赖于编译环境，目前支持keil，iar，和gcc，对于gcc，需要修改链接文件(.ld)，在只读数据区添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_cevent_start = .;</span><br><span class="line">KEEP (*(cEvent))</span><br><span class="line">_cevent_end = .;</span><br></pre></td></tr></table></figure><ol><li><p>初始化cevent</p><p> 系统初始化时，调用<code>ceventInit</code></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceventInit();</span><br></pre></td></tr></table></figure></li><li><p>注册cevent事件监听</p><p> 在c文件中，调用<code>CEVENT_EXPORT</code>导出事件监听</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CEVENT_EXPORT(<span class="number">0</span>, handler, (<span class="type">void</span> *)param);</span><br></pre></td></tr></table></figure></li><li><p>发送cevent事件</p><p> 在事件发生的地方，调用<code>ceventPost</code>抛出事件</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ceventPost(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用cevent解耦模块初始化"><a href="#使用cevent解耦模块初始化" class="headerlink" title="使用cevent解耦模块初始化"></a>使用<code>cevent</code>解耦模块初始化</h2><p>嵌入式编程中，我们习惯会在程序启动的时候，调用各个模块的初始化函数，其实这也是一种耦合，会造成<code>main</code>函数中出现很长的初始化代码，借助<code>cevent</code>，我们可以对初始化进行优化解耦</p><ol><li><p>定义初始化事件</p><p> 定义初始化事件的值，对于初始化，有些模块可能会依赖于其他模块的初始化，会有一个先后顺序要求，所以这里我们可以把初始化分成两个阶段，定义两个事件，当然，如果有更复杂的要求，可以再多分几个阶段，只需要多定义几个事件就行</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>     EVENT_INIT_STAGE1       0</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     EVENT_INIT_STAGE2       1</span></span><br></pre></td></tr></table></figure></li><li><p>初始化<code>cevent</code>，抛出事件</p><p> 在<code>main</code>函数中初始化<code>cevent</code>，并抛出初始化事件</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    ceventInit();</span><br><span class="line"></span><br><span class="line">    ceventPost(EVENT_INIT_STAGE1);</span><br><span class="line">    ceventPost(EVENT_INIT_STAGE2);</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>注册事件监听</p><p> 对所有需要初始化的函数注册事件监听，这里我以对<code>letter-shell</code>注册事件监听为例，分为两个部分，初始化串口和初始化shell</p><p> 在<code>serial</code>模块中，将串口初始化注册到初始化第一阶段，<code>cevent</code>支持将不大于7个的参数直接传递到注册的监听函数中，下面的注册方式，相当于在<code>EVENT_INIT_STAGE1</code>事件发生的地方，也就是<code>main</code>函数中对应的位置，调用<code>serialInit(&amp;debugSerial)</code></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CEVENT_EXPORT(EVENT_INIT_STAGE1, serialInit, (<span class="type">void</span> *)(&amp;debugSerial));</span><br></pre></td></tr></table></figure><p> 然后再<code>shell</code>模块中，将shell初始化函数注册到初始化第二阶段</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CEVENT_EXPORT(EVENT_INIT_STAGE1, shellInit);</span><br></pre></td></tr></table></figure></li></ol><h2 id="使用cevent解耦mainloop"><a href="#使用cevent解耦mainloop" class="headerlink" title="使用cevent解耦mainloop"></a>使用<code>cevent</code>解耦<code>mainloop</code></h2><p>再无操作系统的嵌入式编程中，我们如果同时希望运行多个模块的逻辑，通常是在<code>mainloop</code>中循环调用，这种将函数写入<code>mainloop</code>的做法，也会增加耦合</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 写在mainloop中的模块逻辑</span></span><br><span class="line">        shellTask(&amp;shell);</span><br><span class="line">        LedProcess();</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过使用<code>cevent</code>，也可以很方便的消除这种耦合</p><ol><li><p>定义mainloop事件</p><p> 定义mainloop事件的值</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span>     EVENT_MAIN_LOOP         3</span></span><br></pre></td></tr></table></figure></li><li><p>在mainloop中抛出事件</p><p> 去掉mainloop中对其他模块的调用，改为排除mainloop事件</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ceventPost(EVENT_MAIN_LOOP);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在各模块中注册事件监听</p><p> 分别在各个模块中，注册对mainloop事件的监听</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CEVENT_EXPORT(EVENT_MAIN_LOOP, shellTask, (<span class="type">void</span> *)(&amp;shell));</span><br></pre></td></tr></table></figure> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CEVENT_EXPORT(EVENT_MAIN_LOOP, LedProcess);</span><br></pre></td></tr></table></figure></li></ol><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p><code>cevent</code>是一个非常小的模块，本身代码及其简单，但是，通过模仿广播机制，让<code>cevent</code>可以发挥很强大的功能，通过，还可以结合<code>cpost</code>，实现延迟事件等功能</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对于模块化编程来说，如何实现各模块间的解耦一直是一个比较令人头疼的问题，特别是对于嵌入式编程，由于控制逻辑复杂，并且对程序体积有控制，经常容</summary>
      
    
    
    
    <category term="C" scheme="http://nevermindzzt.github.io/categories/C/"/>
    
    
    <category term="嵌入式" scheme="http://nevermindzzt.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="STM32" scheme="http://nevermindzzt.github.io/tags/STM32/"/>
    
    <category term="C" scheme="http://nevermindzzt.github.io/tags/C/"/>
    
    <category term="shell" scheme="http://nevermindzzt.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Android 音频框架分析</title>
    <link href="http://nevermindzzt.github.io/2020/10/15/Android%20%E9%9F%B3%E9%A2%91%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/"/>
    <id>http://nevermindzzt.github.io/2020/10/15/Android%20%E9%9F%B3%E9%A2%91%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/</id>
    <published>2020-10-15T02:45:00.000Z</published>
    <updated>2021-02-21T10:50:11.768Z</updated>
    
    <content type="html"><![CDATA[<h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p><img src="/../../out/source/_posts/Android%20%E9%9F%B3%E9%A2%91%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B/Audio%20%E5%88%9D%E5%A7%8B%E5%8C%96%E6%B5%81%E7%A8%8B.png" alt="Audio 初始化流程"></p><p>系统开机启动时，加载<code>init.rc</code>，启动<code>mediaserver</code>，在Android7.0之后，启动<code>mediaserver</code>的脚本被分离在了<code>audioserver.rc</code>文件中</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">service media /system/bin/mediaserver</span><br><span class="line">    class main</span><br><span class="line">    user media</span><br><span class="line">    group audio camera inet net_bt net_bt_admin net_bw_acct drmrpc mediadrm</span><br><span class="line">    ioprio rt 4</span><br></pre></td></tr></table></figure><p><code>mediaserver</code>源码位置为<code>frameworks/av/media/mediaserver</code>，<code>mediaserver</code>目录中主要只有<code>main_mediaserver.cpp</code>一个文件，用于启动<code>AudioFlinger</code>, <code>AudioPolicyService</code>, <code>RadioService</code>等服务，其中与音频相关的主要是<code>AudioFlinger</code>和<code>AudioPolicyService</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc __unused, <span class="type">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> (doLog &amp;&amp; (childPid = fork()) != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">/** 启动log线程 */</span></span><br><span class="line">        ...</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">        AudioFlinger::<span class="built_in">instantiate</span>();</span><br><span class="line">        MediaPlayerService::<span class="built_in">instantiate</span>();</span><br><span class="line">        ResourceManagerService::<span class="built_in">instantiate</span>();</span><br><span class="line">        CameraService::<span class="built_in">instantiate</span>();</span><br><span class="line">        AudioPolicyService::<span class="built_in">instantiate</span>();</span><br><span class="line">        SoundTriggerHwService::<span class="built_in">instantiate</span>();</span><br><span class="line">        RadioService::<span class="built_in">instantiate</span>();</span><br><span class="line">        <span class="built_in">registerExtensions</span>();</span><br><span class="line">        ProcessState::<span class="built_in">self</span>()-&gt;<span class="built_in">startThreadPool</span>();</span><br><span class="line">        IPCThreadState::<span class="built_in">self</span>()-&gt;<span class="built_in">joinThreadPool</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>AudioPolicyService</code>中，会在<code>onFristRef</code>方法中启动<code>AudioPolicyManager</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AudioPolicyService::onFirstRef</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        ....</span><br><span class="line">        <span class="comment">// start tone playback thread</span></span><br><span class="line">        mTonePlaybackThread = <span class="keyword">new</span> <span class="built_in">AudioCommandThread</span>(<span class="built_in">String8</span>(<span class="string">&quot;ApmTone&quot;</span>, <span class="keyword">this</span>));</span><br><span class="line">        <span class="comment">// start audio commands thread</span></span><br><span class="line">        mTonePlaybackThread = <span class="keyword">new</span> <span class="built_in">AudioCommandThread</span>(<span class="built_in">String8</span>(<span class="string">&quot;ApmAudio&quot;</span>, <span class="keyword">this</span>));</span><br><span class="line">        <span class="comment">// start output activity command thread</span></span><br><span class="line">        mTonePlaybackThread = <span class="keyword">new</span> <span class="built_in">AudioCommandThread</span>(<span class="built_in">String8</span>(<span class="string">&quot;ApmOutput&quot;</span>, <span class="keyword">this</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> USE_LEGACY_AUDIO_POLICY</span></span><br><span class="line">        <span class="comment">// 使用老版本的 audio policy 初始化方式</span></span><br><span class="line">        ....</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">        <span class="comment">// 使用最新的 audio policy 初始化方式</span></span><br><span class="line">        <span class="built_in">ALOGI</span>(<span class="string">&quot;AudioPolicyService CSTOR in new mode&quot;</span>);</span><br><span class="line"></span><br><span class="line">        mAudioPolicyClient = <span class="keyword">new</span> <span class="built_in">AudioPolicyClient</span>(<span class="keyword">this</span>);</span><br><span class="line">        mAudioPolicyManager =<span class="built_in">createAudioPolicyManager</span>(mAudioPolicyClient);    <span class="comment">// 创建 AudioPolicyManager 对象</span></span><br><span class="line">        ....</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// load audio processing modules</span></span><br><span class="line">    sp&lt;AudioPolicyEffects&gt; audioPolicyEffects = <span class="keyword">new</span> <span class="built_in">AudioPolicyEffects</span>();</span><br><span class="line">    &#123;</span><br><span class="line">        ....</span><br><span class="line">        mAudioPolicyEffects = audioPolicyEffects;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>createAudioPolicyManager</code>函数位于<code>frameworks/av/services/audiopolicy/manager/AudioPolicyFactory.cpp</code>文件，这个文件只有这一个函数，直接调用了<code>AudioPolicyManager</code>的构造函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="function">AudioPolicyInterface* <span class="title">createAudioPolicyManager</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        AudioPolicyClientInterface *clientInterface)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">AudioPolicyManager</span>(clientInterface);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后在<code>AudioPolicyManager</code>的构造函数中，会对<code>audio_policy.conf</code>文件(Android 7.0之后可以配置成audio_policy_configuration.xml)进行解析，加载所有的<code>HwModule</code>，创建输入输出流和播放、录音线程</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">AudioPolicyManager::<span class="built_in">AudioPolicyManager</span>(AudioPolicyClientInterface *clientInterface)</span><br><span class="line">    :</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> AUDIO_POLICY_TEST</span></span><br><span class="line">    <span class="built_in">Thread</span>(<span class="literal">false</span>),</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">//AUDIO_POLICY_TEST</span></span></span><br><span class="line">    <span class="built_in">mLimitRingtoneVolume</span>(<span class="literal">false</span>), <span class="built_in">mLastVoiceVolume</span>(<span class="number">-1.0f</span>),</span><br><span class="line">    <span class="built_in">mA2dpSuspended</span>(<span class="literal">false</span>),</span><br><span class="line">    <span class="built_in">mSpeakerDrcEnabled</span>(<span class="literal">false</span>),</span><br><span class="line">    <span class="built_in">mAudioPortGeneration</span>(<span class="number">1</span>),</span><br><span class="line">    <span class="built_in">mBeaconMuteRefCount</span>(<span class="number">0</span>),</span><br><span class="line">    <span class="built_in">mBeaconPlayingRefCount</span>(<span class="number">0</span>),</span><br><span class="line">    <span class="built_in">mBeaconMuted</span>(<span class="literal">false</span>)</span><br><span class="line">&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/** 加载audio_policy.conf文件 */</span></span><br><span class="line">    <span class="keyword">if</span> (ConfigParsingUtils::<span class="built_in">loadAudioPolicyConfig</span>(AUDIO_POLICY_VENDOR_CONFIG_FILE,</span><br><span class="line">                 mHwModules, mAvailableInputDevices, mAvailableOutputDevices,</span><br><span class="line">                 mDefaultOutputDevice, mSpeakerDrcEnabled) != NO_ERROR) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ConfigParsingUtils::<span class="built_in">loadAudioPolicyConfig</span>(AUDIO_POLICY_CONFIG_FILE,</span><br><span class="line">                                  mHwModules, mAvailableInputDevices, mAvailableOutputDevices,</span><br><span class="line">                                  mDefaultOutputDevice, mSpeakerDrcEnabled) != NO_ERROR) &#123;</span><br><span class="line">            <span class="built_in">ALOGE</span>(<span class="string">&quot;could not load audio policy configuration file, setting defaults&quot;</span>);</span><br><span class="line">            <span class="built_in">defaultAudioPolicyConfig</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// mAvailableOutputDevices and mAvailableInputDevices now contain all attached devices</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// must be done after reading the policy (since conditionned by Speaker Drc Enabling)</span></span><br><span class="line">    <span class="comment">/** 调节音量曲线 */</span></span><br><span class="line">    mEngine-&gt;<span class="built_in">initializeVolumeCurves</span>(mSpeakerDrcEnabled);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// open all output streams needed to access attached devices</span></span><br><span class="line">    <span class="type">audio_devices_t</span> outputDeviceTypes = mAvailableOutputDevices.<span class="built_in">types</span>();</span><br><span class="line">    <span class="type">audio_devices_t</span> inputDeviceTypes = mAvailableInputDevices.<span class="built_in">types</span>() &amp; ~AUDIO_DEVICE_BIT_IN;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; mHwModules.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">        mHwModules[i]-&gt;mHandle = mpClientInterface-&gt;<span class="built_in">loadHwModule</span>(mHwModules[i]-&gt;mName);</span><br><span class="line">        <span class="keyword">if</span> (mHwModules[i]-&gt;mHandle == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">ALOGW</span>(<span class="string">&quot;could not open HW module %s&quot;</span>, mHwModules[i]-&gt;mName);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// open all output streams needed to access attached devices</span></span><br><span class="line">        <span class="comment">// except for direct output streams that are only opened when they are actually</span></span><br><span class="line">        <span class="comment">// required by an app.</span></span><br><span class="line">        <span class="comment">// This also validates mAvailableOutputDevices list</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; mHwModules[i]-&gt;mOutputProfiles.<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> sp&lt;IOProfile&gt; outProfile = mHwModules[i]-&gt;mOutputProfiles[j];</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">/** 获取采样率、通道数、数据格式等各音频参数 */</span></span><br><span class="line">            outputDesc-&gt;mDevice = profileType;</span><br><span class="line">            <span class="type">audio_config_t</span> config = AUDIO_CONFIG_INITIALIZER;</span><br><span class="line">            config.sample_rate = outputDesc-&gt;mSamplingRate;</span><br><span class="line">            config.channel_mask = outputDesc-&gt;mChannelMask;</span><br><span class="line">            config.format = outputDesc-&gt;mFormat;</span><br><span class="line">            <span class="type">audio_io_handle_t</span> output = AUDIO_IO_HANDLE_NONE;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 打开 outputStream 创建 playbackThread 线程 */</span></span><br><span class="line">            <span class="type">status_t</span> status = mpClientInterface-&gt;<span class="built_in">openOutput</span>(outProfile-&gt;<span class="built_in">getModuleHandle</span>(),</span><br><span class="line">                                                            &amp;output,</span><br><span class="line">                                                            &amp;config,</span><br><span class="line">                                                            &amp;outputDesc-&gt;mDevice,</span><br><span class="line">                                                            <span class="built_in">String8</span>(<span class="string">&quot;&quot;</span>),</span><br><span class="line">                                                            &amp;outputDesc-&gt;mLatency,</span><br><span class="line">                                                            outputDesc-&gt;mFlags);</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// open input streams needed to access attached devices to validate</span></span><br><span class="line">        <span class="comment">// mAvailableInputDevices list</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; mHwModules[i]-&gt;mInputProfiles.<span class="built_in">size</span>(); j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">const</span> sp&lt;IOProfile&gt; inProfile = mHwModules[i]-&gt;mInputProfiles[j];</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line">            <span class="comment">/** 获取采样率、通道数、数据格式等各音频参数 */</span></span><br><span class="line">            <span class="type">audio_config_t</span> config = AUDIO_CONFIG_INITIALIZER;</span><br><span class="line">            config.sample_rate = inputDesc-&gt;mSamplingRate;</span><br><span class="line">            config.channel_mask = inputDesc-&gt;mChannelMask;</span><br><span class="line">            config.format = inputDesc-&gt;mFormat;</span><br><span class="line">            <span class="type">audio_io_handle_t</span> input = AUDIO_IO_HANDLE_NONE;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/** 打开 inputStream 创建 recordThread  线程 */</span></span><br><span class="line">            <span class="type">status_t</span> status = mpClientInterface-&gt;<span class="built_in">openInput</span>(inProfile-&gt;<span class="built_in">getModuleHandle</span>(),</span><br><span class="line">                                                           &amp;input,</span><br><span class="line">                                                           &amp;config,</span><br><span class="line">                                                           &amp;inputDesc-&gt;mDevice,</span><br><span class="line">                                                           address,</span><br><span class="line">                                                           AUDIO_SOURCE_MIC,</span><br><span class="line">                                                           AUDIO_INPUT_FLAG_NONE);</span><br><span class="line"></span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">/** 更新系统缓存的音频输出设备信息 */</span></span><br><span class="line">    <span class="built_in">updateDevicesAndOutputs</span>();</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置文件加载"><a href="#配置文件加载" class="headerlink" title="配置文件加载"></a>配置文件加载</h2><p><code>audio_policy.conf</code>文件用于配置系统的音频设备，在<code>AudioPolicyManager</code>的构造方法中加载解析，通过<code>ConfigParsingUtils</code>的<code>loadAudioPolicyConfig</code>函数，解析这个文件，获取所有配置的输入输出设备类型以及各项配置，然后对所有获取到的<code>HwModule</code>进行遍历，通过<code>AudioFlinger</code>加载对应的so，生成音频设备</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">audio_module_handle_t</span> <span class="title">AudioFlinger::loadHwModule_l</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *name)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">audio_hw_device_t</span> *dev;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 加载so */</span></span><br><span class="line">    <span class="type">int</span> rc = <span class="built_in">load_audio_interface</span>(name, &amp;dev);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 添加音频设备 */</span></span><br><span class="line">    <span class="type">audio_module_handle_t</span> handle = <span class="built_in">nextUniqueId</span>();</span><br><span class="line">    mAudioHwDevs.<span class="built_in">add</span>(handle, <span class="keyword">new</span> <span class="built_in">AudioHwDevice</span>(handle, name, dev, flags));</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> handle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>load_audio_interface</code>函数中，会从<code>system/lib/hw</code>中找到对应于<code>name</code>的库，一般为<code>audio.[name].default.so</code>，这个库由音频设备商提供，系统默认的音频设备库由<code>hardware/mstar/audio</code>编译生成，对应<code>primary</code>的设备</p><p><code>audio_hw_device_t</code>为音频设备的实现，结构体在<code>hardware/libhardware/include/hardware/audio.h</code>中定义，每一个音频设备驱动都需要实现这个结构体定义的各个函数，所有操作音频设备都是通过这个结构体生成的对象实现的</p><h2 id="录音调用流程"><a href="#录音调用流程" class="headerlink" title="录音调用流程"></a>录音调用流程</h2><p><img src="/../../out/source/_posts/Android%20%E9%9F%B3%E9%A2%91%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90/%E5%BD%95%E9%9F%B3%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B/Audio%20%E5%BD%95%E9%9F%B3%E8%B0%83%E7%94%A8%E6%B5%81%E7%A8%8B.png" alt="Audio 录音调用流程"></p><p>一般情况下，录音由Android App通过<code>AudioRecord</code>发起，<code>AudioRecord</code>通过jni调用Android框架libmedia中的<code>AudioRecord</code>，<code>AudioRecord</code>的构造函数直接调用<code>set</code>函数，在<code>set</code>函数中，会首先进行一些参数的设置，然后运行<code>recordThread</code>，打开录音设备(<code>IAudioRecord</code>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">AudioRecord::set</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">audio_source_t</span> inputSource,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">uint32_t</span> sampleRate,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">audio_format_t</span> format,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">audio_channel_mask_t</span> channelMask,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">size_t</span> frameCount,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">callback_t</span> cbf,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">void</span>* user,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">uint32_t</span> notificationFrames,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">bool</span> threadCanCallJava,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">int</span> sessionId,</span></span></span><br><span class="line"><span class="params"><span class="function">        transfer_type transferType,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">audio_input_flags_t</span> flags,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">int</span> uid,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">pid_t</span> pid,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">const</span> <span class="type">audio_attributes_t</span>* pAttributes)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/** 设置参数 */</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 打开 recordThread */</span></span><br><span class="line">    <span class="keyword">if</span> (cbf != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        mAudioRecordThread = <span class="keyword">new</span> <span class="built_in">AudioRecordThread</span>(*<span class="keyword">this</span>, threadCanCallJava);</span><br><span class="line">        mAudioRecordThread-&gt;<span class="built_in">run</span>(<span class="string">&quot;AudioRecord&quot;</span>, ANDROID_PRIORITY_AUDIO);</span><br><span class="line">        <span class="comment">// thread begins in paused state, and will not reference us until start()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create the IAudioRecord</span></span><br><span class="line">    <span class="type">status_t</span> status = <span class="built_in">openRecord_l</span>(<span class="number">0</span> <span class="comment">/*epoch*/</span>, mOpPackageName);</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NO_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>set</code>函数调用了<code>openRecord_l</code>函数，在<code>openRecord_l</code>函数中，首先获取了<code>AudioFlinger</code>的实例，然后通过构造<code>AudioRecord</code>时传进来的参数，获取对应的<code>audio_io_handle_t</code>句柄</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">audio_io_handle_t</span> input;</span><br><span class="line"><span class="type">status_t</span> status = AudioSystem::<span class="built_in">getInputForAttr</span>(&amp;mAttributes, &amp;input,</span><br><span class="line">                                    (<span class="type">audio_session_t</span>)mSessionId,</span><br><span class="line">                                    IPCThreadState::<span class="built_in">self</span>()-&gt;<span class="built_in">getCallingUid</span>(),</span><br><span class="line">                                    mSampleRate, mFormat, mChannelMask,</span><br><span class="line">                                    mFlags, mSelectedDeviceId);</span><br></pre></td></tr></table></figure><p>然后，通过<code>AudioFlinger</code>打开录音</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">sp&lt;IAudioRecord&gt; record = audioFlinger-&gt;<span class="built_in">openRecord</span>(input,</span><br><span class="line">                                                   mSampleRate,</span><br><span class="line">                                                   mFormat,</span><br><span class="line">                                                   mChannelMask,</span><br><span class="line">                                                   opPackageName,</span><br><span class="line">                                                   &amp;temp,</span><br><span class="line">                                                   &amp;trackFlags,</span><br><span class="line">                                                   tid,</span><br><span class="line">                                                   mClientUid,</span><br><span class="line">                                                   &amp;mSessionId,</span><br><span class="line">                                                   &amp;notificationFrames,</span><br><span class="line">                                                   iMem,</span><br><span class="line">                                                   bufferMem,</span><br><span class="line">                                                   &amp;status);</span><br></pre></td></tr></table></figure><h2 id="录音设备选择"><a href="#录音设备选择" class="headerlink" title="录音设备选择"></a>录音设备选择</h2><p>录音调用流程中，在<code>AudioRecord</code>的构造函数中，通过<code>set</code>函数调用了<code>AudioSystem::getInputForAttr</code>以获得匹配的录音设备，我们着重关注第一个参数<code>mAttributes</code></p><p>在Android App中，我们通过实例化一个<code>AudioRecord(java)</code>来进行录音，通常调用的构造方法为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AudioRecord</span><span class="params">(<span class="type">int</span> audioSource, <span class="type">int</span> sampleRateInHz, <span class="type">int</span> channelConfig, <span class="type">int</span> audioFormat,</span></span><br><span class="line"><span class="params">        <span class="type">int</span> bufferSizeInBytes)</span></span><br><span class="line"><span class="keyword">throws</span> IllegalArgumentException &#123;</span><br><span class="line">    <span class="built_in">this</span>((<span class="keyword">new</span> <span class="title class_">AudioAttributes</span>.Builder())</span><br><span class="line">                .setInternalCapturePreset(audioSource)</span><br><span class="line">                .build(),</span><br><span class="line">            (<span class="keyword">new</span> <span class="title class_">AudioFormat</span>.Builder())</span><br><span class="line">                .setChannelMask(getChannelMaskFromLegacyConfig(channelConfig,</span><br><span class="line">                                    <span class="literal">true</span><span class="comment">/*allow legacy configurations*/</span>))</span><br><span class="line">                .setEncoding(audioFormat)</span><br><span class="line">                .setSampleRate(sampleRateInHz)</span><br><span class="line">                .build(),</span><br><span class="line">            bufferSizeInBytes,</span><br><span class="line">            AudioManager.AUDIO_SESSION_ID_GENERATE);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里需要传递<code>audioSource</code>，<code>sampleRateInHz</code>等参数，并将这些参数构造成了一个<code>AudioAttributes</code>的对象，其中<code>audioSource</code>就是选择的音频源，在Android App端，可以选择的源如下(<code>frameworks/base/media/java/android/media/MediaRecorder.java</code>)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">AudioSource</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">AudioSource</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@hide</span> */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">AUDIO_SOURCE_INVALID</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* Do not change these values without updating their counterparts</span></span><br><span class="line"><span class="comment">   * in system/media/audio/include/system/audio.h!</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Default audio source **/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">DEFAULT</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Microphone audio source */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">MIC</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Voice call uplink (Tx) audio source */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">VOICE_UPLINK</span> <span class="operator">=</span> <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Voice call downlink (Rx) audio source */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">VOICE_DOWNLINK</span> <span class="operator">=</span> <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Voice call uplink + downlink audio source */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">VOICE_CALL</span> <span class="operator">=</span> <span class="number">4</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Microphone audio source with same orientation as camera if available, the main</span></span><br><span class="line"><span class="comment">     *  device microphone otherwise */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">CAMCORDER</span> <span class="operator">=</span> <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Microphone audio source tuned for voice recognition if available, behaves like</span></span><br><span class="line"><span class="comment">     *  &#123;<span class="doctag">@link</span> #DEFAULT&#125; otherwise. */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">VOICE_RECOGNITION</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** Microphone audio source tuned for voice communications such as VoIP. It</span></span><br><span class="line"><span class="comment">     *  will for instance take advantage of echo cancellation or automatic gain control</span></span><br><span class="line"><span class="comment">     *  if available. It otherwise behaves like &#123;<span class="doctag">@link</span> #DEFAULT&#125; if no voice processing</span></span><br><span class="line"><span class="comment">     *  is applied.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">VOICE_COMMUNICATION</span> <span class="operator">=</span> <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Audio source for a submix of audio streams to be presented remotely.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * An application can use this audio source to capture a mix of audio streams</span></span><br><span class="line"><span class="comment">     * that should be transmitted to a remote receiver such as a Wifi display.</span></span><br><span class="line"><span class="comment">     * While recording is active, these audio streams are redirected to the remote</span></span><br><span class="line"><span class="comment">     * submix instead of being played on the device speaker or headset.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;&lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Certain streams are excluded from the remote submix, including</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> AudioManager#STREAM_RING&#125;, &#123;<span class="doctag">@link</span> AudioManager#STREAM_ALARM&#125;,</span></span><br><span class="line"><span class="comment">     * and &#123;<span class="doctag">@link</span> AudioManager#STREAM_NOTIFICATION&#125;.  These streams will continue</span></span><br><span class="line"><span class="comment">     * to be presented locally as usual.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;&lt;p&gt;</span></span><br><span class="line"><span class="comment">     * Capturing the remote submix audio requires the</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@link</span> android.Manifest.permission#CAPTURE_AUDIO_OUTPUT&#125; permission.</span></span><br><span class="line"><span class="comment">     * This permission is reserved for use by system components and is not available to</span></span><br><span class="line"><span class="comment">     * third-party applications.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">REMOTE_SUBMIX</span> <span class="operator">=</span> <span class="number">8</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MStar Android Patch Begin</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     * BT PCM data send from remote devices which needs to be processed as PCM input</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">BT_MIC</span> <span class="operator">=</span> <span class="number">9</span>;</span><br><span class="line">    <span class="comment">// MStar Android Patch End</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Audio source for capturing broadcast radio tuner output.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SystemApi</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">RADIO_TUNER</span> <span class="operator">=</span> <span class="number">1998</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Audio source for preemptible, low-priority software hotword detection</span></span><br><span class="line"><span class="comment">     * It presents the same gain and pre processing tuning as &#123;<span class="doctag">@link</span> #VOICE_RECOGNITION&#125;.</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * An application should use this audio source when it wishes to do</span></span><br><span class="line"><span class="comment">     * always-on software hotword detection, while gracefully giving in to any other application</span></span><br><span class="line"><span class="comment">     * that might want to read from the microphone.</span></span><br><span class="line"><span class="comment">     * &lt;/p&gt;</span></span><br><span class="line"><span class="comment">     * This is a hidden audio source.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@hide</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@SystemApi</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="variable">HOTWORD</span> <span class="operator">=</span> <span class="number">1999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>传递进来的参数jni，调用到<code>AudioRecord(cpp)</code>的<code>set</code>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">AudioRecord::set</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">audio_source_t</span> inputSource,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">uint32_t</span> sampleRate,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">audio_format_t</span> format,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">audio_channel_mask_t</span> channelMask,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">size_t</span> frameCount,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">callback_t</span> cbf,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">void</span>* user,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">uint32_t</span> notificationFrames,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">bool</span> threadCanCallJava,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">int</span> sessionId,</span></span></span><br><span class="line"><span class="params"><span class="function">        transfer_type transferType,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">audio_input_flags_t</span> flags,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">int</span> uid,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">pid_t</span> pid,</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="type">const</span> <span class="type">audio_attributes_t</span>* pAttributes)</span></span></span><br></pre></td></tr></table></figure><p>在这里，<code>inputSource</code>即表示音频源，<code>audio_source_t</code>在<code>audio.h</code>中定义(<code>system/media/audio/include/system/audio.h</code>)且与<code>AudioSource</code>中的定义一一对应</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">enum</span> &#123;</span><br><span class="line">    AUDIO_SOURCE_DEFAULT             = <span class="number">0</span>,</span><br><span class="line">    AUDIO_SOURCE_MIC                 = <span class="number">1</span>,</span><br><span class="line">    AUDIO_SOURCE_VOICE_UPLINK        = <span class="number">2</span>,</span><br><span class="line">    AUDIO_SOURCE_VOICE_DOWNLINK      = <span class="number">3</span>,</span><br><span class="line">    AUDIO_SOURCE_VOICE_CALL          = <span class="number">4</span>,</span><br><span class="line">    AUDIO_SOURCE_CAMCORDER           = <span class="number">5</span>,</span><br><span class="line">    AUDIO_SOURCE_VOICE_RECOGNITION   = <span class="number">6</span>,</span><br><span class="line">    AUDIO_SOURCE_VOICE_COMMUNICATION = <span class="number">7</span>,</span><br><span class="line">    AUDIO_SOURCE_REMOTE_SUBMIX       = <span class="number">8</span>, <span class="comment">/* Source for the mix to be presented remotely.      */</span></span><br><span class="line">                                          <span class="comment">/* An example of remote presentation is Wifi Display */</span></span><br><span class="line">                                          <span class="comment">/*  where a dongle attached to a TV can be used to   */</span></span><br><span class="line">                                          <span class="comment">/*  play the mix captured by this audio source.      */</span></span><br><span class="line">    <span class="comment">// MStar Android Patch Begin</span></span><br><span class="line">    AUDIO_SOURCE_BLUETOOTH_MIC       = <span class="number">9</span>,</span><br><span class="line">    AUDIO_SOURCE_CAPTURE_DEVICE0     = <span class="number">10</span>,</span><br><span class="line">    AUDIO_SOURCE_CAPTURE_DEVICE1     = <span class="number">11</span>,</span><br><span class="line">    AUDIO_SOURCE_A2DP                = <span class="number">12</span>, <span class="comment">/* restricted to internal audioflinger routing */</span></span><br><span class="line">    <span class="comment">// MStar Android Patch End</span></span><br><span class="line">    AUDIO_SOURCE_CNT,</span><br><span class="line">    AUDIO_SOURCE_MAX                 = AUDIO_SOURCE_CNT - <span class="number">1</span>,</span><br><span class="line">    AUDIO_SOURCE_FM_TUNER            = <span class="number">1998</span>,</span><br><span class="line">    AUDIO_SOURCE_HOTWORD             = <span class="number">1999</span>, <span class="comment">/* A low-priority, preemptible audio source for</span></span><br><span class="line"><span class="comment">                                                for background software hotword detection.</span></span><br><span class="line"><span class="comment">                                                Same tuning as AUDIO_SOURCE_VOICE_RECOGNITION.</span></span><br><span class="line"><span class="comment">                                                Used only internally to the framework. Not exposed</span></span><br><span class="line"><span class="comment">                                                at the audio HAL. */</span></span><br><span class="line">&#125; <span class="type">audio_source_t</span>;</span><br></pre></td></tr></table></figure><p>我们再回头看<code>getInputForAttr</code>函数(<code>frameworks/av/media/libmedia/AudioSystem.cpp</code>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">AudioSystem::getInputForAttr</span><span class="params">(<span class="type">const</span> <span class="type">audio_attributes_t</span> *attr,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">audio_io_handle_t</span> *input,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">audio_session_t</span> session,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">uid_t</span> uid,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">uint32_t</span> samplingRate,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">audio_format_t</span> format,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">audio_channel_mask_t</span> channelMask,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">audio_input_flags_t</span> flags,</span></span></span><br><span class="line"><span class="params"><span class="function">                                <span class="type">audio_port_handle_t</span> selectedDeviceId)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> sp&lt;IAudioPolicyService&gt;&amp; aps = AudioSystem::<span class="built_in">get_audio_policy_service</span>();</span><br><span class="line">    <span class="keyword">if</span> (aps == <span class="number">0</span>) <span class="keyword">return</span> NO_INIT;</span><br><span class="line">    <span class="keyword">return</span> aps-&gt;<span class="built_in">getInputForAttr</span>(</span><br><span class="line">            attr, input, session, uid, samplingRate, format, channelMask, flags, selectedDeviceId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，这里直接调用的<code>AudioPolicyService</code>的<code>getInputForAttr</code>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">status_t</span> <span class="title">AudioPolicyManager::getInputForAttr</span><span class="params">(<span class="type">const</span> <span class="type">audio_attributes_t</span> *attr,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="type">audio_io_handle_t</span> *input,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="type">audio_session_t</span> session,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="type">uid_t</span> uid,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="type">uint32_t</span> samplingRate,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="type">audio_format_t</span> format,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="type">audio_channel_mask_t</span> channelMask,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="type">audio_input_flags_t</span> flags,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="type">audio_port_handle_t</span> selectedDeviceId,</span></span></span><br><span class="line"><span class="params"><span class="function">                                             <span class="type">input_type_t</span> *inputType)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    *input = AUDIO_IO_HANDLE_NONE;</span><br><span class="line">    *inputType = API_INPUT_INVALID;</span><br><span class="line">    <span class="type">audio_devices_t</span> device;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (inputSource == AUDIO_SOURCE_REMOTE_SUBMIX &amp;&amp;</span><br><span class="line">            <span class="built_in">strncmp</span>(attr-&gt;tags, <span class="string">&quot;addr=&quot;</span>, <span class="built_in">strlen</span>(<span class="string">&quot;addr=&quot;</span>)) == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="type">status_t</span> ret = mPolicyMixes.<span class="built_in">getInputMixForAttr</span>(*attr, &amp;policyMix);</span><br><span class="line">        <span class="keyword">if</span> (ret != NO_ERROR) &#123;</span><br><span class="line">            <span class="keyword">return</span> ret;</span><br><span class="line">        &#125;</span><br><span class="line">        *inputType = API_INPUT_MIX_EXT_POLICY_REROUTE;</span><br><span class="line">        device = AUDIO_DEVICE_IN_REMOTE_SUBMIX;</span><br><span class="line">        address = <span class="built_in">String8</span>(attr-&gt;tags + <span class="built_in">strlen</span>(<span class="string">&quot;addr=&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        device = <span class="built_in">getDeviceAndMixForInputSource</span>(inputSource, &amp;policyMix);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> NO_ERROR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里先判断<code>inputSource</code>是否为<code>AUDIO_SOURCE_REMOTE_SUBMIX</code>，如果时其他源，则调用<code>getDeviceAndMixForInputSource</code>函数</p><p>这里我们注意一下<code>audio_devices_t</code>这个数据类型，在<code>audio.h</code>中定义，这个数据类型就表示一个具体类型的音频设备，我们再<code>audio_polic.conf</code>中定义音频设备时，<code>device</code>字段的取值就需要是这个数据类型中定义的值</p><p>再来看<code>getDeviceAndMixForInputSource</code>函数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">audio_devices_t</span> <span class="title">AudioPolicyManager::getDeviceAndMixForInputSource</span><span class="params">(<span class="type">audio_source_t</span> inputSource,</span></span></span><br><span class="line"><span class="params"><span class="function">                                                                  AudioMix **policyMix)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">audio_devices_t</span> availableDeviceTypes = mAvailableInputDevices.<span class="built_in">types</span>() &amp; ~AUDIO_DEVICE_BIT_IN;</span><br><span class="line">    <span class="type">audio_devices_t</span> selectedDeviceFromMix =</span><br><span class="line">           mPolicyMixes.<span class="built_in">getDeviceAndMixForInputSource</span>(inputSource, availableDeviceTypes, policyMix);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (selectedDeviceFromMix != AUDIO_DEVICE_NONE) &#123;</span><br><span class="line">        <span class="keyword">return</span> selectedDeviceFromMix;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">getDeviceForInputSource</span>(inputSource);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里首先调用了<code>getDeviceAndMixForInputSource</code>函数，这个应该是混音通道，我们先不看，一般情况，我们调用录音，会走到<code>getDeviceForInputSource</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">audio_devices_t</span> <span class="title">AudioPolicyManager::getDeviceForInputSource</span><span class="params">(<span class="type">audio_source_t</span> inputSource)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> routeIndex = <span class="number">0</span>; routeIndex &lt; mInputRoutes.<span class="built_in">size</span>(); routeIndex++) &#123;</span><br><span class="line">         sp&lt;SessionRoute&gt; route = mInputRoutes.<span class="built_in">valueAt</span>(routeIndex);</span><br><span class="line">         <span class="keyword">if</span> (inputSource == route-&gt;mSource &amp;&amp; route-&gt;<span class="built_in">isActive</span>()) &#123;</span><br><span class="line">             <span class="keyword">return</span> route-&gt;mDeviceDescriptor-&gt;<span class="built_in">type</span>();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> mEngine-&gt;<span class="built_in">getDeviceForInputSource</span>(inputSource);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>getDeviceForInputSource</code>函数直接调用了<code>Engine</code>的<code>getDeviceForInputSource</code>函数(<code>frameworks/av/services/audiopolicy/enginedefault/src/Engine.cpp</code>)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">audio_devices_t</span> <span class="title">Engine::getDeviceForInputSource</span><span class="params">(<span class="type">audio_source_t</span> inputSource)</span> <span class="type">const</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">const</span> DeviceVector &amp;availableOutputDevices = mApmObserver-&gt;<span class="built_in">getAvailableOutputDevices</span>();</span><br><span class="line">    <span class="type">const</span> DeviceVector &amp;availableInputDevices = mApmObserver-&gt;<span class="built_in">getAvailableInputDevices</span>();</span><br><span class="line">    <span class="type">const</span> SwAudioOutputCollection &amp;outputs = mApmObserver-&gt;<span class="built_in">getOutputs</span>();</span><br><span class="line">    <span class="type">audio_devices_t</span> availableDeviceTypes = availableInputDevices.<span class="built_in">types</span>() &amp; ~AUDIO_DEVICE_BIT_IN;</span><br><span class="line"></span><br><span class="line">    <span class="type">uint32_t</span> device = AUDIO_DEVICE_NONE;</span><br><span class="line">    <span class="comment">// MStar Android Patch Begin</span></span><br><span class="line">    <span class="type">char</span> value[PROPERTY_VALUE_MAX] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="comment">// MStar Android Patch End</span></span><br><span class="line">    <span class="keyword">switch</span> (inputSource) &#123;</span><br><span class="line">    <span class="keyword">case</span> AUDIO_SOURCE_VOICE_UPLINK:</span><br><span class="line">      <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_VOICE_CALL) &#123;</span><br><span class="line">          device = AUDIO_DEVICE_IN_VOICE_CALL;</span><br><span class="line">          <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> AUDIO_SOURCE_DEFAULT:</span><br><span class="line">    <span class="keyword">case</span> AUDIO_SOURCE_MIC:</span><br><span class="line">    <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_BLUETOOTH_A2DP) &#123;</span><br><span class="line">        device = AUDIO_DEVICE_IN_BLUETOOTH_A2DP;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((mForceUse[AUDIO_POLICY_FORCE_FOR_RECORD] == AUDIO_POLICY_FORCE_BT_SCO) &amp;&amp;</span><br><span class="line">        (availableDeviceTypes &amp; AUDIO_DEVICE_IN_BLUETOOTH_SCO_HEADSET)) &#123;</span><br><span class="line">        device = AUDIO_DEVICE_IN_BLUETOOTH_SCO_HEADSET;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_WIRED_HEADSET) &#123;</span><br><span class="line">        device = AUDIO_DEVICE_IN_WIRED_HEADSET;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_USB_DEVICE) &#123;</span><br><span class="line">        device = AUDIO_DEVICE_IN_USB_DEVICE;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_BUILTIN_MIC) &#123;</span><br><span class="line">        device = AUDIO_DEVICE_IN_BUILTIN_MIC;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> AUDIO_SOURCE_VOICE_COMMUNICATION:</span><br><span class="line">        <span class="comment">// Allow only use of devices on primary input if in call and HAL does not support routing</span></span><br><span class="line">        <span class="comment">// to voice call path.</span></span><br><span class="line">        <span class="keyword">if</span> ((<span class="built_in">getPhoneState</span>() == AUDIO_MODE_IN_CALL) &amp;&amp;</span><br><span class="line">                (availableOutputDevices.<span class="built_in">types</span>() &amp; AUDIO_DEVICE_OUT_TELEPHONY_TX) == <span class="number">0</span>) &#123;</span><br><span class="line">            sp&lt;AudioOutputDescriptor&gt; primaryOutput = outputs.<span class="built_in">getPrimaryOutput</span>();</span><br><span class="line">            availableDeviceTypes =</span><br><span class="line">                    availableInputDevices.<span class="built_in">getDevicesFromHwModule</span>(primaryOutput-&gt;<span class="built_in">getModuleHandle</span>())</span><br><span class="line">                    &amp; ~AUDIO_DEVICE_BIT_IN;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (mForceUse[AUDIO_POLICY_FORCE_FOR_COMMUNICATION]) &#123;</span><br><span class="line">        <span class="keyword">case</span> AUDIO_POLICY_FORCE_BT_SCO:</span><br><span class="line">            <span class="comment">// if SCO device is requested but no SCO device is available, fall back to default case</span></span><br><span class="line">            <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_BLUETOOTH_SCO_HEADSET) &#123;</span><br><span class="line">                device = AUDIO_DEVICE_IN_BLUETOOTH_SCO_HEADSET;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// FALL THROUGH</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:    <span class="comment">// FORCE_NONE</span></span><br><span class="line">            <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_WIRED_HEADSET) &#123;</span><br><span class="line">                device = AUDIO_DEVICE_IN_WIRED_HEADSET;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_USB_DEVICE) &#123;</span><br><span class="line">                device = AUDIO_DEVICE_IN_USB_DEVICE;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_BUILTIN_MIC) &#123;</span><br><span class="line">                device = AUDIO_DEVICE_IN_BUILTIN_MIC;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> AUDIO_POLICY_FORCE_SPEAKER:</span><br><span class="line">            <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_BACK_MIC) &#123;</span><br><span class="line">                device = AUDIO_DEVICE_IN_BACK_MIC;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_BUILTIN_MIC) &#123;</span><br><span class="line">                device = AUDIO_DEVICE_IN_BUILTIN_MIC;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// MStar Android Patch Begin</span></span><br><span class="line">    <span class="keyword">case</span> AUDIO_SOURCE_BLUETOOTH_MIC:</span><br><span class="line">        <span class="keyword">if</span> (mForceUse[AUDIO_POLICY_FORCE_FOR_RECORD] == AUDIO_POLICY_FORCE_BT_MIC &amp;&amp;</span><br><span class="line">                availableDeviceTypes &amp; AUDIO_DEVICE_IN_BLUETOOTH_MIC) &#123;</span><br><span class="line">                device = AUDIO_DEVICE_IN_BLUETOOTH_MIC;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_BACK_MIC) &#123;</span><br><span class="line">            device = AUDIO_DEVICE_IN_BACK_MIC;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="comment">// MStar Android Patch End</span></span><br><span class="line">    <span class="keyword">case</span> AUDIO_SOURCE_VOICE_RECOGNITION:</span><br><span class="line">    <span class="keyword">case</span> AUDIO_SOURCE_HOTWORD:</span><br><span class="line">        <span class="keyword">if</span> (mForceUse[AUDIO_POLICY_FORCE_FOR_RECORD] == AUDIO_POLICY_FORCE_BT_SCO &amp;&amp;</span><br><span class="line">                availableDeviceTypes &amp; AUDIO_DEVICE_IN_BLUETOOTH_SCO_HEADSET) &#123;</span><br><span class="line">            device = AUDIO_DEVICE_IN_BLUETOOTH_SCO_HEADSET;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_WIRED_HEADSET) &#123;</span><br><span class="line">            device = AUDIO_DEVICE_IN_WIRED_HEADSET;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_USB_DEVICE) &#123;</span><br><span class="line">            device = AUDIO_DEVICE_IN_USB_DEVICE;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_BUILTIN_MIC) &#123;</span><br><span class="line">            device = AUDIO_DEVICE_IN_BUILTIN_MIC;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// MStar Android Patch Begin</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">property_get</span>(<span class="string">&quot;mstar.bt.driver&quot;</span>, value, <span class="literal">NULL</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(value, <span class="string">&quot;bcm&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (mForceUse[AUDIO_POLICY_FORCE_FOR_RECORD] == AUDIO_POLICY_FORCE_BT_MIC &amp;&amp;</span><br><span class="line">                    (inputSource == AUDIO_SOURCE_VOICE_RECOGNITION ||</span><br><span class="line">                    inputSource == AUDIO_SOURCE_MIC)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_BACK_MIC) &#123;</span><br><span class="line">                        device = AUDIO_DEVICE_IN_BACK_MIC;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        device = AUDIO_DEVICE_IN_BLUETOOTH_MIC;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">ALOGE</span>(<span class="string">&quot;picked the Broadcom MIC&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">strcmp</span>(value, <span class="string">&quot;mtk&quot;</span>) || !<span class="built_in">strcmp</span>(value, <span class="string">&quot;rtk&quot;</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> ((inputSource == AUDIO_SOURCE_VOICE_RECOGNITION ||</span><br><span class="line">                    inputSource == AUDIO_SOURCE_MIC)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_BACK_MIC) &#123;</span><br><span class="line">                        device = AUDIO_DEVICE_IN_BACK_MIC;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        device = AUDIO_DEVICE_IN_BLUETOOTH_MIC;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="built_in">ALOGE</span>(<span class="string">&quot;picked the MtkRc MIC&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//other bt to do ???</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">ALOGE</span>(<span class="string">&quot;%s device:%x &quot;</span>, __FUNCTION__, device);</span><br><span class="line">        <span class="comment">// MStar Android Patch End</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> AUDIO_SOURCE_CAMCORDER:</span><br><span class="line">        <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_BACK_MIC) &#123;</span><br><span class="line">            device = AUDIO_DEVICE_IN_BACK_MIC;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_BUILTIN_MIC) &#123;</span><br><span class="line">            device = AUDIO_DEVICE_IN_BUILTIN_MIC;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> AUDIO_SOURCE_VOICE_DOWNLINK:</span><br><span class="line">    <span class="keyword">case</span> AUDIO_SOURCE_VOICE_CALL:</span><br><span class="line">        <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_VOICE_CALL) &#123;</span><br><span class="line">            device = AUDIO_DEVICE_IN_VOICE_CALL;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> AUDIO_SOURCE_REMOTE_SUBMIX:</span><br><span class="line">        <span class="keyword">if</span> (availableDeviceTypes &amp; AUDIO_DEVICE_IN_REMOTE_SUBMIX) &#123;</span><br><span class="line">            device = AUDIO_DEVICE_IN_REMOTE_SUBMIX;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">     <span class="keyword">case</span> AUDIO_SOURCE_FM_TUNER:</span><br><span class="line">        <span class="comment">//if (availableDeviceTypes &amp; AUDIO_DEVICE_IN_FM_TUNER) &#123;</span></span><br><span class="line">        <span class="comment">//    device = AUDIO_DEVICE_IN_FM_TUNER;</span></span><br><span class="line">        <span class="comment">//&#125;</span></span><br><span class="line">        device = AUDIO_DEVICE_IN_BLUETOOTH_A2DP;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">ALOGW</span>(<span class="string">&quot;getDeviceForInputSource() invalid input source %d&quot;</span>, inputSource);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">ALOGE</span>(<span class="string">&quot;getDeviceForInputSource()input source %d, device %08x&quot;</span>, inputSource, device);</span><br><span class="line">    <span class="keyword">return</span> device;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个函数会根据给进来的音频源参数，选择合适并且可用的音频设备，由此，就完成了从Android App层面音频源(<code>AudioSource</code>)到Audio Hal(<code>audio_policy.conf</code>)的调用</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;初始化&quot;&gt;&lt;a href=&quot;#初始化&quot; class=&quot;headerlink&quot; title=&quot;初始化&quot;&gt;&lt;/a&gt;初始化&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/../../out/source/_posts/Android%20%E9%9F%B3%E9%A2%91%E6</summary>
      
    
    
    
    <category term="Android" scheme="http://nevermindzzt.github.io/categories/Android/"/>
    
    
    <category term="Android" scheme="http://nevermindzzt.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>STM32从原理入门(一)-点灯(上篇)</title>
    <link href="http://nevermindzzt.github.io/2020/07/26/STM32%E4%BB%8E%E5%8E%9F%E7%90%86%E5%85%A5%E9%97%A8(%E4%B8%80)-%E7%82%B9%E7%81%AF(%E4%B8%8A%E7%AF%87)/"/>
    <id>http://nevermindzzt.github.io/2020/07/26/STM32%E4%BB%8E%E5%8E%9F%E7%90%86%E5%85%A5%E9%97%A8(%E4%B8%80)-%E7%82%B9%E7%81%AF(%E4%B8%8A%E7%AF%87)/</id>
    <published>2020-07-26T07:07:00.000Z</published>
    <updated>2022-02-27T10:53:36.657Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>有了基本概念之后，下一步要做的，就是搭建好适合自己的开发环境。STM32可以选择的开发环境很多，这个我在上一篇文章里面也提到过，对于初学者，这里就直接选择keil吧，同时搭配STM32Cube MX做工程配置。当然，一开始的工程肯定不能使用STM32Cube MX生成，我们需要手动创建工程，只有这样才能对工程的结构有深入的了解</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ol><li><p>安装开发环境</p><p> 在编写程序之前，请确认已经安装好keil软件，并安装芯片对应的包，这部分网上教程很多，请自行查找</p></li><li><p>准备好开发板</p><p> 嵌入式开发离不开硬件，请确保至少要有一块开发板或者自己制作PCB，本篇文章的内容，至少需要用到一个LED资源</p></li><li><p>准备好文档</p><p> 芯片手册和开发板原理图是必须要的，本篇文章所使用的芯片是STM32F407系列的，所以我准备了STM32F4xx参考手册，具体手册可以到ST官网下载(学会查找资料也是一个重要的技能）</p></li></ol><h2 id="建立工程"><a href="#建立工程" class="headerlink" title="建立工程"></a>建立工程</h2><p>打开keil软件，通过project选项卡新建工程，选择工程目录和工程名，选择对应的芯片，创建工程，此时，keil可能会弹出一下的窗口</p><p><img src="https://s1.ax1x.com/2020/07/26/a9f9Mt.png" alt="Manager RT Env"></p><p>这是keil本身支持的组件管理工具，我们可以在这里直接添加一些包，比如说文件管理之类的，由于我们是第一次使用，目的不是为了快速开发，而是学习，所以我们直接退出这个窗口，手动添加所有文件</p><p>在左侧的project窗口中，展开Target1，右键单击Source Group1，选择添加新文件</p><p><img src="https://s1.ax1x.com/2020/07/26/a9fjmV.png" alt="add file"></p><p>这里我们首先添加一个.s文件，命名为start.s，文件放置在工程目录的src子文件夹中</p><p><img src="https://s1.ax1x.com/2020/07/26/a9hMpd.png" alt="start.s"></p><p>然后编辑这个文件，内容如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br></pre></td><td class="code"><pre><span class="line">;******************** (C) COPYRIGHT 2017 STMicroelectronics ********************</span><br><span class="line">;* File Name          : startup_stm32f407xx.s</span><br><span class="line">;* Author             : MCD Application Team</span><br><span class="line">;* Description        : STM32F407xx devices vector table for MDK-ARM toolchain.</span><br><span class="line">;*                      This module performs:</span><br><span class="line">;*                      - Set the initial SP</span><br><span class="line">;*                      - Set the initial PC == Reset_Handler</span><br><span class="line">;*                      - Set the vector table entries with the exceptions ISR address</span><br><span class="line">;*                      - Branches to __main in the C library (which eventually</span><br><span class="line">;*                        calls main()).</span><br><span class="line">;*                      After Reset the CortexM4 processor is in Thread mode,</span><br><span class="line">;*                      priority is Privileged, and the Stack is set to Main.</span><br><span class="line">;* &lt;&lt;&lt; Use Configuration Wizard in Context Menu &gt;&gt;&gt;</span><br><span class="line">;*******************************************************************************</span><br><span class="line">;</span><br><span class="line">;* Redistribution and use in source and binary forms, with or without modification,</span><br><span class="line">;* are permitted provided that the following conditions are met:</span><br><span class="line">;*   1. Redistributions of source code must retain the above copyright notice,</span><br><span class="line">;*      this list of conditions and the following disclaimer.</span><br><span class="line">;*   2. Redistributions in binary form must reproduce the above copyright notice,</span><br><span class="line">;*      this list of conditions and the following disclaimer in the documentation</span><br><span class="line">;*      and/or other materials provided with the distribution.</span><br><span class="line">;*   3. Neither the name of STMicroelectronics nor the names of its contributors</span><br><span class="line">;*      may be used to endorse or promote products derived from this software</span><br><span class="line">;*      without specific prior written permission.</span><br><span class="line">;*</span><br><span class="line">;* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &quot;AS IS&quot;</span><br><span class="line">;* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE</span><br><span class="line">;* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE</span><br><span class="line">;* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE</span><br><span class="line">;* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL</span><br><span class="line">;* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR</span><br><span class="line">;* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER</span><br><span class="line">;* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,</span><br><span class="line">;* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span><br><span class="line">;* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span><br><span class="line">;</span><br><span class="line">;*******************************************************************************</span><br><span class="line"></span><br><span class="line">; Amount of memory (in bytes) allocated for Stack</span><br><span class="line">; Tailor this value to your application needs</span><br><span class="line">; &lt;h&gt; Stack Configuration</span><br><span class="line">;   &lt;o&gt; Stack Size (in Bytes) &lt;0x0-0xFFFFFFFF:8&gt;</span><br><span class="line">; &lt;/h&gt;</span><br><span class="line"></span><br><span class="line">Stack_Size      EQU     0x00000400</span><br><span class="line"></span><br><span class="line">                AREA    STACK, NOINIT, READWRITE, ALIGN=3</span><br><span class="line">Stack_Mem       SPACE   Stack_Size</span><br><span class="line">__initial_sp</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; &lt;h&gt; Heap Configuration</span><br><span class="line">;   &lt;o&gt;  Heap Size (in Bytes) &lt;0x0-0xFFFFFFFF:8&gt;</span><br><span class="line">; &lt;/h&gt;</span><br><span class="line"></span><br><span class="line">Heap_Size       EQU     0x00000200</span><br><span class="line"></span><br><span class="line">                AREA    HEAP, NOINIT, READWRITE, ALIGN=3</span><br><span class="line">__heap_base</span><br><span class="line">Heap_Mem        SPACE   Heap_Size</span><br><span class="line">__heap_limit</span><br><span class="line"></span><br><span class="line">                PRESERVE8</span><br><span class="line">                THUMB</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">; Vector Table Mapped to Address 0 at Reset</span><br><span class="line">                AREA    RESET, DATA, READONLY</span><br><span class="line">                EXPORT  __Vectors</span><br><span class="line">                EXPORT  __Vectors_End</span><br><span class="line">                EXPORT  __Vectors_Size</span><br><span class="line"></span><br><span class="line">__Vectors       DCD     __initial_sp               ; Top of Stack</span><br><span class="line">                DCD     Reset_Handler              ; Reset Handler</span><br><span class="line">                DCD     NMI_Handler                ; NMI Handler</span><br><span class="line">                DCD     HardFault_Handler          ; Hard Fault Handler</span><br><span class="line">                DCD     MemManage_Handler          ; MPU Fault Handler</span><br><span class="line">                DCD     BusFault_Handler           ; Bus Fault Handler</span><br><span class="line">                DCD     UsageFault_Handler         ; Usage Fault Handler</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     SVC_Handler                ; SVCall Handler</span><br><span class="line">                DCD     DebugMon_Handler           ; Debug Monitor Handler</span><br><span class="line">                DCD     0                          ; Reserved</span><br><span class="line">                DCD     PendSV_Handler             ; PendSV Handler</span><br><span class="line">                DCD     SysTick_Handler            ; SysTick Handler</span><br><span class="line"></span><br><span class="line">                ; External Interrupts</span><br><span class="line">                DCD     WWDG_IRQHandler                   ; Window WatchDog</span><br><span class="line">                DCD     PVD_IRQHandler                    ; PVD through EXTI Line detection</span><br><span class="line">                DCD     TAMP_STAMP_IRQHandler             ; Tamper and TimeStamps through the EXTI line</span><br><span class="line">                DCD     RTC_WKUP_IRQHandler               ; RTC Wakeup through the EXTI line</span><br><span class="line">                DCD     FLASH_IRQHandler                  ; FLASH</span><br><span class="line">                DCD     RCC_IRQHandler                    ; RCC</span><br><span class="line">                DCD     EXTI0_IRQHandler                  ; EXTI Line0</span><br><span class="line">                DCD     EXTI1_IRQHandler                  ; EXTI Line1</span><br><span class="line">                DCD     EXTI2_IRQHandler                  ; EXTI Line2</span><br><span class="line">                DCD     EXTI3_IRQHandler                  ; EXTI Line3</span><br><span class="line">                DCD     EXTI4_IRQHandler                  ; EXTI Line4</span><br><span class="line">                DCD     DMA1_Stream0_IRQHandler           ; DMA1 Stream 0</span><br><span class="line">                DCD     DMA1_Stream1_IRQHandler           ; DMA1 Stream 1</span><br><span class="line">                DCD     DMA1_Stream2_IRQHandler           ; DMA1 Stream 2</span><br><span class="line">                DCD     DMA1_Stream3_IRQHandler           ; DMA1 Stream 3</span><br><span class="line">                DCD     DMA1_Stream4_IRQHandler           ; DMA1 Stream 4</span><br><span class="line">                DCD     DMA1_Stream5_IRQHandler           ; DMA1 Stream 5</span><br><span class="line">                DCD     DMA1_Stream6_IRQHandler           ; DMA1 Stream 6</span><br><span class="line">                DCD     ADC_IRQHandler                    ; ADC1, ADC2 and ADC3s</span><br><span class="line">                DCD     CAN1_TX_IRQHandler                ; CAN1 TX</span><br><span class="line">                DCD     CAN1_RX0_IRQHandler               ; CAN1 RX0</span><br><span class="line">                DCD     CAN1_RX1_IRQHandler               ; CAN1 RX1</span><br><span class="line">                DCD     CAN1_SCE_IRQHandler               ; CAN1 SCE</span><br><span class="line">                DCD     EXTI9_5_IRQHandler                ; External Line[9:5]s</span><br><span class="line">                DCD     TIM1_BRK_TIM9_IRQHandler          ; TIM1 Break and TIM9</span><br><span class="line">                DCD     TIM1_UP_TIM10_IRQHandler          ; TIM1 Update and TIM10</span><br><span class="line">                DCD     TIM1_TRG_COM_TIM11_IRQHandler     ; TIM1 Trigger and Commutation and TIM11</span><br><span class="line">                DCD     TIM1_CC_IRQHandler                ; TIM1 Capture Compare</span><br><span class="line">                DCD     TIM2_IRQHandler                   ; TIM2</span><br><span class="line">                DCD     TIM3_IRQHandler                   ; TIM3</span><br><span class="line">                DCD     TIM4_IRQHandler                   ; TIM4</span><br><span class="line">                DCD     I2C1_EV_IRQHandler                ; I2C1 Event</span><br><span class="line">                DCD     I2C1_ER_IRQHandler                ; I2C1 Error</span><br><span class="line">                DCD     I2C2_EV_IRQHandler                ; I2C2 Event</span><br><span class="line">                DCD     I2C2_ER_IRQHandler                ; I2C2 Error</span><br><span class="line">                DCD     SPI1_IRQHandler                   ; SPI1</span><br><span class="line">                DCD     SPI2_IRQHandler                   ; SPI2</span><br><span class="line">                DCD     USART1_IRQHandler                 ; USART1</span><br><span class="line">                DCD     USART2_IRQHandler                 ; USART2</span><br><span class="line">                DCD     USART3_IRQHandler                 ; USART3</span><br><span class="line">                DCD     EXTI15_10_IRQHandler              ; External Line[15:10]s</span><br><span class="line">                DCD     RTC_Alarm_IRQHandler              ; RTC Alarm (A and B) through EXTI Line</span><br><span class="line">                DCD     OTG_FS_WKUP_IRQHandler            ; USB OTG FS Wakeup through EXTI line</span><br><span class="line">                DCD     TIM8_BRK_TIM12_IRQHandler         ; TIM8 Break and TIM12</span><br><span class="line">                DCD     TIM8_UP_TIM13_IRQHandler          ; TIM8 Update and TIM13</span><br><span class="line">                DCD     TIM8_TRG_COM_TIM14_IRQHandler     ; TIM8 Trigger and Commutation and TIM14</span><br><span class="line">                DCD     TIM8_CC_IRQHandler                ; TIM8 Capture Compare</span><br><span class="line">                DCD     DMA1_Stream7_IRQHandler           ; DMA1 Stream7</span><br><span class="line">                DCD     FMC_IRQHandler                    ; FMC</span><br><span class="line">                DCD     SDIO_IRQHandler                   ; SDIO</span><br><span class="line">                DCD     TIM5_IRQHandler                   ; TIM5</span><br><span class="line">                DCD     SPI3_IRQHandler                   ; SPI3</span><br><span class="line">                DCD     UART4_IRQHandler                  ; UART4</span><br><span class="line">                DCD     UART5_IRQHandler                  ; UART5</span><br><span class="line">                DCD     TIM6_DAC_IRQHandler               ; TIM6 and DAC1&amp;2 underrun errors</span><br><span class="line">                DCD     TIM7_IRQHandler                   ; TIM7</span><br><span class="line">                DCD     DMA2_Stream0_IRQHandler           ; DMA2 Stream 0</span><br><span class="line">                DCD     DMA2_Stream1_IRQHandler           ; DMA2 Stream 1</span><br><span class="line">                DCD     DMA2_Stream2_IRQHandler           ; DMA2 Stream 2</span><br><span class="line">                DCD     DMA2_Stream3_IRQHandler           ; DMA2 Stream 3</span><br><span class="line">                DCD     DMA2_Stream4_IRQHandler           ; DMA2 Stream 4</span><br><span class="line">                DCD     ETH_IRQHandler                    ; Ethernet</span><br><span class="line">                DCD     ETH_WKUP_IRQHandler               ; Ethernet Wakeup through EXTI line</span><br><span class="line">                DCD     CAN2_TX_IRQHandler                ; CAN2 TX</span><br><span class="line">                DCD     CAN2_RX0_IRQHandler               ; CAN2 RX0</span><br><span class="line">                DCD     CAN2_RX1_IRQHandler               ; CAN2 RX1</span><br><span class="line">                DCD     CAN2_SCE_IRQHandler               ; CAN2 SCE</span><br><span class="line">                DCD     OTG_FS_IRQHandler                 ; USB OTG FS</span><br><span class="line">                DCD     DMA2_Stream5_IRQHandler           ; DMA2 Stream 5</span><br><span class="line">                DCD     DMA2_Stream6_IRQHandler           ; DMA2 Stream 6</span><br><span class="line">                DCD     DMA2_Stream7_IRQHandler           ; DMA2 Stream 7</span><br><span class="line">                DCD     USART6_IRQHandler                 ; USART6</span><br><span class="line">                DCD     I2C3_EV_IRQHandler                ; I2C3 event</span><br><span class="line">                DCD     I2C3_ER_IRQHandler                ; I2C3 error</span><br><span class="line">                DCD     OTG_HS_EP1_OUT_IRQHandler         ; USB OTG HS End Point 1 Out</span><br><span class="line">                DCD     OTG_HS_EP1_IN_IRQHandler          ; USB OTG HS End Point 1 In</span><br><span class="line">                DCD     OTG_HS_WKUP_IRQHandler            ; USB OTG HS Wakeup through EXTI</span><br><span class="line">                DCD     OTG_HS_IRQHandler                 ; USB OTG HS</span><br><span class="line">                DCD     DCMI_IRQHandler                   ; DCMI  </span><br><span class="line">                DCD     0                                 ; Reserved</span><br><span class="line">                DCD     HASH_RNG_IRQHandler               ; Hash and Rng</span><br><span class="line">                DCD     FPU_IRQHandler                    ; FPU</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__Vectors_End</span><br><span class="line"></span><br><span class="line">__Vectors_Size  EQU  __Vectors_End - __Vectors</span><br><span class="line"></span><br><span class="line">                AREA    |.text|, CODE, READONLY</span><br><span class="line"></span><br><span class="line">; Reset handler</span><br><span class="line">Reset_Handler    PROC</span><br><span class="line">                 EXPORT  Reset_Handler             [WEAK]</span><br><span class="line">;        IMPORT  SystemInit</span><br><span class="line">;        IMPORT  __main</span><br><span class="line">        IMPORT  main</span><br><span class="line"></span><br><span class="line">;                 LDR     R0, =SystemInit</span><br><span class="line">;                 BLX     R0</span><br><span class="line">;                 LDR     R0, =__main</span><br><span class="line">;                 BX      R0</span><br><span class="line">                 LDR     R0, =main</span><br><span class="line">                 BX      R0</span><br><span class="line">                 ENDP</span><br><span class="line"></span><br><span class="line">; Dummy Exception Handlers (infinite loops which can be modified)</span><br><span class="line"></span><br><span class="line">NMI_Handler     PROC</span><br><span class="line">                EXPORT  NMI_Handler                [WEAK]</span><br><span class="line">                B       .</span><br><span class="line">                ENDP</span><br><span class="line">HardFault_Handler\</span><br><span class="line">                PROC</span><br><span class="line">                EXPORT  HardFault_Handler          [WEAK]</span><br><span class="line">                B       .</span><br><span class="line">                ENDP</span><br><span class="line">MemManage_Handler\</span><br><span class="line">                PROC</span><br><span class="line">                EXPORT  MemManage_Handler          [WEAK]</span><br><span class="line">                B       .</span><br><span class="line">                ENDP</span><br><span class="line">BusFault_Handler\</span><br><span class="line">                PROC</span><br><span class="line">                EXPORT  BusFault_Handler           [WEAK]</span><br><span class="line">                B       .</span><br><span class="line">                ENDP</span><br><span class="line">UsageFault_Handler\</span><br><span class="line">                PROC</span><br><span class="line">                EXPORT  UsageFault_Handler         [WEAK]</span><br><span class="line">                B       .</span><br><span class="line">                ENDP</span><br><span class="line">SVC_Handler     PROC</span><br><span class="line">                EXPORT  SVC_Handler                [WEAK]</span><br><span class="line">                B       .</span><br><span class="line">                ENDP</span><br><span class="line">DebugMon_Handler\</span><br><span class="line">                PROC</span><br><span class="line">                EXPORT  DebugMon_Handler           [WEAK]</span><br><span class="line">                B       .</span><br><span class="line">                ENDP</span><br><span class="line">PendSV_Handler  PROC</span><br><span class="line">                EXPORT  PendSV_Handler             [WEAK]</span><br><span class="line">                B       .</span><br><span class="line">                ENDP</span><br><span class="line">SysTick_Handler PROC</span><br><span class="line">                EXPORT  SysTick_Handler            [WEAK]</span><br><span class="line">                B       .</span><br><span class="line">                ENDP</span><br><span class="line"></span><br><span class="line">Default_Handler PROC</span><br><span class="line"></span><br><span class="line">                EXPORT  WWDG_IRQHandler                   [WEAK]</span><br><span class="line">                EXPORT  PVD_IRQHandler                    [WEAK]</span><br><span class="line">                EXPORT  TAMP_STAMP_IRQHandler             [WEAK]</span><br><span class="line">                EXPORT  RTC_WKUP_IRQHandler               [WEAK]</span><br><span class="line">                EXPORT  FLASH_IRQHandler                  [WEAK]</span><br><span class="line">                EXPORT  RCC_IRQHandler                    [WEAK]</span><br><span class="line">                EXPORT  EXTI0_IRQHandler                  [WEAK]</span><br><span class="line">                EXPORT  EXTI1_IRQHandler                  [WEAK]</span><br><span class="line">                EXPORT  EXTI2_IRQHandler                  [WEAK]</span><br><span class="line">                EXPORT  EXTI3_IRQHandler                  [WEAK]</span><br><span class="line">                EXPORT  EXTI4_IRQHandler                  [WEAK]</span><br><span class="line">                EXPORT  DMA1_Stream0_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  DMA1_Stream1_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  DMA1_Stream2_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  DMA1_Stream3_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  DMA1_Stream4_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  DMA1_Stream5_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  DMA1_Stream6_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  ADC_IRQHandler                    [WEAK]</span><br><span class="line">                EXPORT  CAN1_TX_IRQHandler                [WEAK]</span><br><span class="line">                EXPORT  CAN1_RX0_IRQHandler               [WEAK]</span><br><span class="line">                EXPORT  CAN1_RX1_IRQHandler               [WEAK]</span><br><span class="line">                EXPORT  CAN1_SCE_IRQHandler               [WEAK]</span><br><span class="line">                EXPORT  EXTI9_5_IRQHandler                [WEAK]</span><br><span class="line">                EXPORT  TIM1_BRK_TIM9_IRQHandler          [WEAK]</span><br><span class="line">                EXPORT  TIM1_UP_TIM10_IRQHandler          [WEAK]</span><br><span class="line">                EXPORT  TIM1_TRG_COM_TIM11_IRQHandler     [WEAK]</span><br><span class="line">                EXPORT  TIM1_CC_IRQHandler                [WEAK]</span><br><span class="line">                EXPORT  TIM2_IRQHandler                   [WEAK]</span><br><span class="line">                EXPORT  TIM3_IRQHandler                   [WEAK]</span><br><span class="line">                EXPORT  TIM4_IRQHandler                   [WEAK]</span><br><span class="line">                EXPORT  I2C1_EV_IRQHandler                [WEAK]</span><br><span class="line">                EXPORT  I2C1_ER_IRQHandler                [WEAK]</span><br><span class="line">                EXPORT  I2C2_EV_IRQHandler                [WEAK]</span><br><span class="line">                EXPORT  I2C2_ER_IRQHandler                [WEAK]</span><br><span class="line">                EXPORT  SPI1_IRQHandler                   [WEAK]</span><br><span class="line">                EXPORT  SPI2_IRQHandler                   [WEAK]</span><br><span class="line">                EXPORT  USART1_IRQHandler                 [WEAK]</span><br><span class="line">                EXPORT  USART2_IRQHandler                 [WEAK]</span><br><span class="line">                EXPORT  USART3_IRQHandler                 [WEAK]</span><br><span class="line">                EXPORT  EXTI15_10_IRQHandler              [WEAK]</span><br><span class="line">                EXPORT  RTC_Alarm_IRQHandler              [WEAK]</span><br><span class="line">                EXPORT  OTG_FS_WKUP_IRQHandler            [WEAK]</span><br><span class="line">                EXPORT  TIM8_BRK_TIM12_IRQHandler         [WEAK]</span><br><span class="line">                EXPORT  TIM8_UP_TIM13_IRQHandler          [WEAK]</span><br><span class="line">                EXPORT  TIM8_TRG_COM_TIM14_IRQHandler     [WEAK]</span><br><span class="line">                EXPORT  TIM8_CC_IRQHandler                [WEAK]</span><br><span class="line">                EXPORT  DMA1_Stream7_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  FMC_IRQHandler                    [WEAK]</span><br><span class="line">                EXPORT  SDIO_IRQHandler                   [WEAK]</span><br><span class="line">                EXPORT  TIM5_IRQHandler                   [WEAK]</span><br><span class="line">                EXPORT  SPI3_IRQHandler                   [WEAK]</span><br><span class="line">                EXPORT  UART4_IRQHandler                  [WEAK]</span><br><span class="line">                EXPORT  UART5_IRQHandler                  [WEAK]</span><br><span class="line">                EXPORT  TIM6_DAC_IRQHandler               [WEAK]</span><br><span class="line">                EXPORT  TIM7_IRQHandler                   [WEAK]</span><br><span class="line">                EXPORT  DMA2_Stream0_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  DMA2_Stream1_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  DMA2_Stream2_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  DMA2_Stream3_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  DMA2_Stream4_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  ETH_IRQHandler                    [WEAK]</span><br><span class="line">                EXPORT  ETH_WKUP_IRQHandler               [WEAK]</span><br><span class="line">                EXPORT  CAN2_TX_IRQHandler                [WEAK]</span><br><span class="line">                EXPORT  CAN2_RX0_IRQHandler               [WEAK]</span><br><span class="line">                EXPORT  CAN2_RX1_IRQHandler               [WEAK]</span><br><span class="line">                EXPORT  CAN2_SCE_IRQHandler               [WEAK]</span><br><span class="line">                EXPORT  OTG_FS_IRQHandler                 [WEAK]</span><br><span class="line">                EXPORT  DMA2_Stream5_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  DMA2_Stream6_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  DMA2_Stream7_IRQHandler           [WEAK]</span><br><span class="line">                EXPORT  USART6_IRQHandler                 [WEAK]</span><br><span class="line">                EXPORT  I2C3_EV_IRQHandler                [WEAK]</span><br><span class="line">                EXPORT  I2C3_ER_IRQHandler                [WEAK]</span><br><span class="line">                EXPORT  OTG_HS_EP1_OUT_IRQHandler         [WEAK]</span><br><span class="line">                EXPORT  OTG_HS_EP1_IN_IRQHandler          [WEAK]</span><br><span class="line">                EXPORT  OTG_HS_WKUP_IRQHandler            [WEAK]</span><br><span class="line">                EXPORT  OTG_HS_IRQHandler                 [WEAK]</span><br><span class="line">                EXPORT  DCMI_IRQHandler                   [WEAK]</span><br><span class="line">                EXPORT  HASH_RNG_IRQHandler               [WEAK]</span><br><span class="line">                EXPORT  FPU_IRQHandler                    [WEAK]</span><br><span class="line"></span><br><span class="line">WWDG_IRQHandler</span><br><span class="line">PVD_IRQHandler</span><br><span class="line">TAMP_STAMP_IRQHandler</span><br><span class="line">RTC_WKUP_IRQHandler</span><br><span class="line">FLASH_IRQHandler</span><br><span class="line">RCC_IRQHandler</span><br><span class="line">EXTI0_IRQHandler</span><br><span class="line">EXTI1_IRQHandler</span><br><span class="line">EXTI2_IRQHandler</span><br><span class="line">EXTI3_IRQHandler</span><br><span class="line">EXTI4_IRQHandler</span><br><span class="line">DMA1_Stream0_IRQHandler</span><br><span class="line">DMA1_Stream1_IRQHandler</span><br><span class="line">DMA1_Stream2_IRQHandler</span><br><span class="line">DMA1_Stream3_IRQHandler</span><br><span class="line">DMA1_Stream4_IRQHandler</span><br><span class="line">DMA1_Stream5_IRQHandler</span><br><span class="line">DMA1_Stream6_IRQHandler</span><br><span class="line">ADC_IRQHandler</span><br><span class="line">CAN1_TX_IRQHandler</span><br><span class="line">CAN1_RX0_IRQHandler</span><br><span class="line">CAN1_RX1_IRQHandler</span><br><span class="line">CAN1_SCE_IRQHandler</span><br><span class="line">EXTI9_5_IRQHandler</span><br><span class="line">TIM1_BRK_TIM9_IRQHandler</span><br><span class="line">TIM1_UP_TIM10_IRQHandler</span><br><span class="line">TIM1_TRG_COM_TIM11_IRQHandler  </span><br><span class="line">TIM1_CC_IRQHandler</span><br><span class="line">TIM2_IRQHandler</span><br><span class="line">TIM3_IRQHandler</span><br><span class="line">TIM4_IRQHandler</span><br><span class="line">I2C1_EV_IRQHandler</span><br><span class="line">I2C1_ER_IRQHandler</span><br><span class="line">I2C2_EV_IRQHandler</span><br><span class="line">I2C2_ER_IRQHandler</span><br><span class="line">SPI1_IRQHandler</span><br><span class="line">SPI2_IRQHandler</span><br><span class="line">USART1_IRQHandler</span><br><span class="line">USART2_IRQHandler</span><br><span class="line">USART3_IRQHandler</span><br><span class="line">EXTI15_10_IRQHandler</span><br><span class="line">RTC_Alarm_IRQHandler</span><br><span class="line">OTG_FS_WKUP_IRQHandler</span><br><span class="line">TIM8_BRK_TIM12_IRQHandler</span><br><span class="line">TIM8_UP_TIM13_IRQHandler</span><br><span class="line">TIM8_TRG_COM_TIM14_IRQHandler  </span><br><span class="line">TIM8_CC_IRQHandler</span><br><span class="line">DMA1_Stream7_IRQHandler</span><br><span class="line">FMC_IRQHandler</span><br><span class="line">SDIO_IRQHandler</span><br><span class="line">TIM5_IRQHandler</span><br><span class="line">SPI3_IRQHandler</span><br><span class="line">UART4_IRQHandler</span><br><span class="line">UART5_IRQHandler</span><br><span class="line">TIM6_DAC_IRQHandler</span><br><span class="line">TIM7_IRQHandler</span><br><span class="line">DMA2_Stream0_IRQHandler</span><br><span class="line">DMA2_Stream1_IRQHandler</span><br><span class="line">DMA2_Stream2_IRQHandler</span><br><span class="line">DMA2_Stream3_IRQHandler</span><br><span class="line">DMA2_Stream4_IRQHandler</span><br><span class="line">ETH_IRQHandler</span><br><span class="line">ETH_WKUP_IRQHandler</span><br><span class="line">CAN2_TX_IRQHandler</span><br><span class="line">CAN2_RX0_IRQHandler</span><br><span class="line">CAN2_RX1_IRQHandler</span><br><span class="line">CAN2_SCE_IRQHandler</span><br><span class="line">OTG_FS_IRQHandler</span><br><span class="line">DMA2_Stream5_IRQHandler</span><br><span class="line">DMA2_Stream6_IRQHandler</span><br><span class="line">DMA2_Stream7_IRQHandler</span><br><span class="line">USART6_IRQHandler</span><br><span class="line">I2C3_EV_IRQHandler</span><br><span class="line">I2C3_ER_IRQHandler</span><br><span class="line">OTG_HS_EP1_OUT_IRQHandler</span><br><span class="line">OTG_HS_EP1_IN_IRQHandler</span><br><span class="line">OTG_HS_WKUP_IRQHandler</span><br><span class="line">OTG_HS_IRQHandler</span><br><span class="line">DCMI_IRQHandler</span><br><span class="line">HASH_RNG_IRQHandler</span><br><span class="line">FPU_IRQHandler  </span><br><span class="line"></span><br><span class="line">                B       .</span><br><span class="line"></span><br><span class="line">                ENDP</span><br><span class="line"></span><br><span class="line">                ALIGN</span><br><span class="line"></span><br><span class="line">;*******************************************************************************</span><br><span class="line">; User Stack and Heap initialization</span><br><span class="line">;*******************************************************************************</span><br><span class="line">                 IF      :DEF:__MICROLIB</span><br><span class="line"></span><br><span class="line">                 EXPORT  __initial_sp</span><br><span class="line">                 EXPORT  __heap_base</span><br><span class="line">                 EXPORT  __heap_limit</span><br><span class="line"></span><br><span class="line">                 ELSE</span><br><span class="line"></span><br><span class="line">                 IMPORT  __use_two_region_memory</span><br><span class="line">                 EXPORT  __user_initial_stackheap</span><br><span class="line"></span><br><span class="line">__user_initial_stackheap</span><br><span class="line"></span><br><span class="line">                 LDR     R0, =  Heap_Mem</span><br><span class="line">                 LDR     R1, =(Stack_Mem + Stack_Size)</span><br><span class="line">                 LDR     R2, = (Heap_Mem +  Heap_Size)</span><br><span class="line">                 LDR     R3, = Stack_Mem</span><br><span class="line">                 BX      LR</span><br><span class="line"></span><br><span class="line">                 ALIGN</span><br><span class="line"></span><br><span class="line">                 ENDIF</span><br><span class="line"></span><br><span class="line">                 END</span><br><span class="line"></span><br><span class="line">;************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE*****</span><br></pre></td></tr></table></figure><p>这个文件是ST的固件包直接提供的，不过为了各位初学者理解他的作用和工程结构，我对其做了修改，以适用于我们此次所建立的最简单STM32工程，大家先不用管这里面的内容，只需要复制到你的工程，后面会对这个文件进行分析</p><p>之后，同样的方式，我们再建立一个main.c文件，这个文件，需要根据你具体使用的硬件资源做修改，我这里的内容如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">unsigned</span> <span class="type">int</span> *rcc = (<span class="type">unsigned</span> <span class="type">int</span> *)<span class="number">0x40023830</span>U;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">unsigned</span> <span class="type">int</span> *mode = (<span class="type">unsigned</span> <span class="type">int</span> *)<span class="number">0x40021400</span>U;</span><br><span class="line">    <span class="keyword">volatile</span> <span class="type">unsigned</span> <span class="type">int</span> *bssr = (<span class="type">unsigned</span> <span class="type">int</span> *)<span class="number">0x40021418</span>U;</span><br><span class="line">    *rcc = (*rcc | (<span class="number">1</span> &lt;&lt; <span class="number">5</span>));</span><br><span class="line">    *mode = *mode &amp; <span class="number">0xFFF3FFFF</span> | <span class="number">0x00040000</span>;</span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *bssr |= <span class="number">1</span> &lt;&lt; <span class="number">9</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) ;</span><br><span class="line">        *bssr |= <span class="number">1</span> &lt;&lt; <span class="number">25</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) ;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这就是一个最简单的STM32工程了</p><p>看到这里，你可能已经懵了，这都是啥啊，这里面奇奇怪怪的数字都是怎么来的，不要着急，下面我们慢慢分析</p><h2 id="程序启动"><a href="#程序启动" class="headerlink" title="程序启动"></a>程序启动</h2><p>首先我们需要知道的是，STM32的程序是怎么启动的，一般来说，芯片上电后，会从芯片上固定的地址开始运行程序，对于STM32，一般是内部Flash的起始地址，也就是0x08000000这个地址，当然，程序也可以从RAM启动，这取决于两个BOOT引脚的配置。程序的第一个字是堆栈地址，从第二个字开始，便是中断向量表，中断向量表第一个数据，也就是程序的第二个字(从内部Flash启动时，这个字地址为0x08000004)存放的是复位中断的服务函数地址，程序便是从这里开始执行的</p><p>也就是说，芯片一上电，就会先执行此一复位操作，一切我们编写的程序逻辑，都是从复位中断的服务函数中开始的</p><p>所以，我们再看回start.s文件的内容，在68行左右开始，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">; Vector Table Mapped to Address 0 at Reset</span><br><span class="line">                AREA    RESET, DATA, READONLY</span><br><span class="line">                EXPORT  __Vectors</span><br><span class="line">                EXPORT  __Vectors_End</span><br><span class="line">                EXPORT  __Vectors_Size</span><br><span class="line"></span><br><span class="line">__Vectors       DCD     __initial_sp               ; Top of Stack</span><br><span class="line">                DCD     Reset_Handler              ; Reset Handler</span><br><span class="line">                DCD     NMI_Handler                ; NMI Handler</span><br></pre></td></tr></table></figure><p>首先用AREA指令声明了一块区域，这块区域标记为RESET，也就是存放至程序开始的地方，对应到内部Flash 0x08000000的地址，后面调EXPORT是声明符号，紧接着，使用DCD指令定义了<code>__initial_sp</code>，也就是堆栈的栈顶地址，意思就是把<code>__initial_sp</code>的值，放置在这个地址(0x08000000)上，同样的，下一条DCD指令，把<code>Reset_Handler</code>的值，放置在了0x08000004这个地址上，前面说到，程序会从这里执行，而<code>Reset_Handler</code>声明的是一段汇编代码，如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">; Reset handler</span><br><span class="line">Reset_Handler    PROC</span><br><span class="line">                 EXPORT  Reset_Handler             [WEAK]</span><br><span class="line">;        IMPORT  SystemInit</span><br><span class="line">;        IMPORT  __main</span><br><span class="line">        IMPORT   main</span><br><span class="line"></span><br><span class="line">;                 LDR     R0, =SystemInit</span><br><span class="line">;                 BLX     R0</span><br><span class="line">;                 LDR     R0, =__main</span><br><span class="line">;                 BX      R0</span><br><span class="line">                 LDR     R0, =main</span><br><span class="line">                 BX      R0</span><br><span class="line">                 ENDP</span><br></pre></td></tr></table></figure><p>以<code>;</code>开头的为注释，我们先忽略，再看这一段代码，首先，使用IMPORT声明了<code>main</code>这个符号，我们知道，<code>main</code>即为我们再main.c这个文件中声明的主函数，之后，使用LDR指令，将<code>main</code>函数的地址加载到R0寄存器中，然后使用BX指令，跳转到R0寄存器值指向的地址，也就是跳转到main函数执行</p><p>到这里，程序就已经进入到了C语言世界了，我们可以再main函数中，实现自己的逻辑，调用其他函数等</p><h2 id="一切都是寄存器和内存操作"><a href="#一切都是寄存器和内存操作" class="headerlink" title="一切都是寄存器和内存操作"></a>一切都是寄存器和内存操作</h2><p>start.s的关键代码解释清楚了，那main.c文件中那一堆莫名其妙的数字是什么意思呢，再具体解释main函数之前，我们首先需要明确一个概念，那就是，在嵌入式软件开发中，一切的操作，最终都是对寄存器和对内存(储存)的操作</p><p>什么意思呢，举个例子，比如说你现在想要控制一个GPIO口输入一个高电平，你可以通过调用库的方式，可能一个<code>HAL_GPIO_WritePin</code>就行了，但是，你有去了解，这个函数又做了哪些操作吗。事实上，这个函数只做了一个简单的事情，那就是往一个对应的地址，写入了一个对应的数值</p><p>对于32位arm cortex M系列的芯片，它所有的外设，RAM，ROM都是对应映射到一个4GB的地址空间的，这一块Cortex M3(M4)权威指南有详细的介绍，也就是说，你操作外设，实际上是通过操作外设对应于4GB地址空间中的某一个地址的内存实现的，所以说，一切都是寄存器和内存操作</p><p>举例来说，对于STM32F4系列芯片的GPIOF端口引脚，控制其模式的寄存器地址为<code>0x40021400U</code>，那我们想要控制GPIOF的某一个引脚为输出模式，直需要往这个地址对应的数据位写入对应的数据即可</p><h2 id="点灯"><a href="#点灯" class="headerlink" title="点灯"></a>点灯</h2><p>我们再来分析main.c文件，首先，说明三个寄存器</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">volatile</span> <span class="type">unsigned</span> <span class="type">int</span> *rcc = (<span class="type">unsigned</span> <span class="type">int</span> *)<span class="number">0x40023830</span>U;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">unsigned</span> <span class="type">int</span> *mode = (<span class="type">unsigned</span> <span class="type">int</span> *)<span class="number">0x40021400</span>U;</span><br><span class="line"><span class="keyword">volatile</span> <span class="type">unsigned</span> <span class="type">int</span> *bssr = (<span class="type">unsigned</span> <span class="type">int</span> *)<span class="number">0x40021418</span>U;</span><br></pre></td></tr></table></figure><p><code>rcc</code>, <code>mode</code>, <code>bssr</code>分别是时钟源控制，GPIOF引脚模式和GPIOF端口复位&#x2F;置位寄存器的对应地址，正如前面说到的，我们通过直接往对应地址写数据的方式，控制外设</p><p>首先，开启GPIOF的时钟源</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*rcc = (*rcc | (<span class="number">1</span> &lt;&lt; <span class="number">5</span>));</span><br></pre></td></tr></table></figure><p>然后设置引脚输入模式，我这里LED使用的引脚是GPIOF的9号引脚，对照手册，我们知道，需要设置引脚模式寄存器的第19，20位为二进制01</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*mode = *mode &amp; <span class="number">0xFFF3FFFF</span> | <span class="number">0x00040000</span>;</span><br></pre></td></tr></table></figure><p>然后交替控制引脚复位和置位，达到LED闪烁的效果</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    *bssr |= <span class="number">1</span> &lt;&lt; <span class="number">9</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) ;</span><br><span class="line">    *bssr |= <span class="number">1</span> &lt;&lt; <span class="number">25</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000000</span>; i++) ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本篇基本介绍了一个最简的STM32工程，当然，我们实际项目中，是不会使用这种方式去操作外设，但是，这篇文章的主要目的是让大家了解外设操作的一些细节，下一篇文章，我将会说明，如何根据你所以使用的开发板资源，修改这个工程，让它能在你的板子上跑起来，以及一些重要的，编译器相关的知识</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;有了基本概念之后，下一步要做的，就是搭建好适合自己的开发环境。STM32可以选择的开发环境很多，这个我在上一篇文章里面也提到过，对于初学者，</summary>
      
    
    
    
    <category term="STM32" scheme="http://nevermindzzt.github.io/categories/STM32/"/>
    
    
    <category term="嵌入式 STM32" scheme="http://nevermindzzt.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F-STM32/"/>
    
  </entry>
  
  <entry>
    <title>STM32从原理入门(零)-起点</title>
    <link href="http://nevermindzzt.github.io/2020/07/19/STM32%E4%BB%8E%E5%8E%9F%E7%90%86%E5%85%A5%E9%97%A8(%E9%9B%B6)-%E8%B5%B7%E7%82%B9/"/>
    <id>http://nevermindzzt.github.io/2020/07/19/STM32%E4%BB%8E%E5%8E%9F%E7%90%86%E5%85%A5%E9%97%A8(%E9%9B%B6)-%E8%B5%B7%E7%82%B9/</id>
    <published>2020-07-19T10:18:00.000Z</published>
    <updated>2022-02-27T10:53:36.661Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我从毕业工作到现在，已经整整两年了，和STM32打交道也已经有三年了，这期间，碰到的问题不少，解决的问题也很多，而且也体会到了使用STM32实实在在做产品开发，同时也有了自己的开源项目，要我自己评价的话，那就是对于STM32，对于嵌入式软件开发，算是入门了</p><p>网上针对STM32的教程很多，非常优秀的教程也不少，但是，大多数教程，都只是在告诉你要怎么做，很少有教程会详细分析，为什么要这么做，我个人认为，知道为什么，要比只知道怎么做重要的太多，毕竟，你不可能永远都只用一种芯片，一套工具或者一套外设</p><p>所以我希望通过自己的几篇文章，和大家分享一下自己这几年攒下来的知识，希望可以有效地帮助想学习相关知识的朋友，当然，文章中免不了会有一些错误，大家可以直接指出，一起交流</p><h2 id="单片机、MCU、STM32"><a href="#单片机、MCU、STM32" class="headerlink" title="单片机、MCU、STM32?"></a>单片机、MCU、STM32?</h2><p>一开始学过51单片机的朋友可能会混淆一些概念，认为所谓的单片机就是指51，简单来说，一块包含处理器(CPU)，存储器(RAM和ROM)，包含IO和各种外设的芯片就可以叫做单片机，所以STM32也是单片机的一种，而MCU其实就是指的单片机</p><p>STM32是意法半导体推出的基于arm cortex-m内核的MCU，因为其价格便宜，性能强大，外设丰富，现在很多产品都会有它的身影，同时网上资料，教程也特别丰富，入门门槛也不高，相对而言，现在还是很火的</p><h2 id="怎么学"><a href="#怎么学" class="headerlink" title="怎么学"></a>怎么学</h2><p>实践是检验真理的唯一标准，要想学好STM32，动手是绝对少不了的，你不能一上来就抱着好几个G的教学视频，连芯片长什么样子都没见过，就直接把视频刷一遍。所以，请确保你至少有一块开发板，如果想直接了解更深的话，可以选择买一块核心板，买一些外部元件，自己用杜邦线连接或者直接自己画PCB，因为嵌入式开发从来都不是可以绝对的分为软件和硬件的。</p><h2 id="看什么资料"><a href="#看什么资料" class="headerlink" title="看什么资料"></a>看什么资料</h2><p>芯片手册——了解一块芯片最直接的方式，芯片手册会介绍芯片的资源，会教你如何控制一块芯片，通过芯片手册，你还可以了解芯片一部分的内部结构，可以知道芯片是怎么运行的</p><p>Cortex M3(M4)权威指南——这是任何一个使用Cortex M系列芯片的人，我都极力推荐一定要仔细看完的一本书，这本书详细介绍了Cortex M系列内核的设计以及使用</p><h2 id="HAL库、标准库"><a href="#HAL库、标准库" class="headerlink" title="HAL库、标准库?"></a>HAL库、标准库?</h2><p>可能有部分朋友初学STM32的时候会疑惑，我该用HAL库还是用标准库？我的建议是，都不用</p><p>如果你是抱着学习的目的，那我建议直接使用寄存器操作，这样可以让你理解更加透彻，当然，实际开发中，很少有不使用库直接操作寄存器的，学习过程也不可能一直只操作寄存器，但是，你需要理解，你使用的库它干了什么活，如果问题发生在库中，你有没有能力尽心分析并解决</p><p>然后再说到HAL库和标准库，这个其实也没啥可纠结的了，ST已经不维护标准库了，新学习如果使用库的话毫无疑问是要选择HAL库</p><h2 id="选择什么IDE"><a href="#选择什么IDE" class="headerlink" title="选择什么IDE"></a>选择什么IDE</h2><p>支持STM32开发的IDE有不少，主流的有keil，iar也有使用gcc加外部编辑器，trueStudio，platformIO等等，对于初学者而言，选择一个好用的IDE可能会使学习曲线更加平滑，因为不用理会工程配置，编译的各种问题</p><p>但是，还是那句话，如果你是抱着学习的目的，不管选择什么IDE，我都建议你要弄清楚在你的程序开发过程中，IDE帮你做了哪些工作，我建议你要去了解IDE的各个选项代表的意义，去阅读IDE的手册，对于编译，链接这些过程，都要有了解</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>第一篇文章，主要介绍了几个概念，还有几个刚入门的朋友可能会问的问题，算是做一个大体的介绍吧，后面如果想到还有什么问题，会随时更新这篇文章</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我从毕业工作到现在，已经整整两年了，和STM32打交道也已经有三年了，这期间，碰到的问题不少，解决的问题也很多，而且也体会到了使用STM32</summary>
      
    
    
    
    <category term="STM32" scheme="http://nevermindzzt.github.io/categories/STM32/"/>
    
    
    <category term="嵌入式 STM32" scheme="http://nevermindzzt.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F-STM32/"/>
    
  </entry>
  
  <entry>
    <title>letter-shell代理函数解析</title>
    <link href="http://nevermindzzt.github.io/2020/04/17/letter-shell%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/"/>
    <id>http://nevermindzzt.github.io/2020/04/17/letter-shell%E4%BB%A3%E7%90%86%E5%87%BD%E6%95%B0%E8%A7%A3%E6%9E%90/</id>
    <published>2020-04-17T00:32:45.000Z</published>
    <updated>2020-07-07T04:56:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p><a href="https://github.com/NevermindZZT/letter-shell">letter shell</a>默认支持整形，字符，字符串参数的自动解析，我一直以为，浮点型的参数也是可以支持的，结果前几天发现，浮点型参数只在某些特定情况下可以使用(仅当浮点型参数为函数的最后一个参数时)，为此，我尝试了一种新的方式，从而引出了代理函数和代理参数解析的概念，可以实现任意类型参数的解析</p><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>如果你需要导出一个命令到shell，但是函数又有shell原生不支持的数据类型，比如说<code>void test(int a, float b, int c, float d)</code>，那么要怎么办呢</p><p>最简单的，你可能会重新定义一个函数<code>void testWarpper(int a, int b, int c, int d)</code>，在这个函数里面对参数进行转换，调用<code>test</code>，然后导出<code>testWarpper</code>作为命令</p><p>这就是所谓代理函数的概念，letter shell的代理函数就是基于此，只不过通过宏，简化了代理函数的定义，代理函数宏定义如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief shell 代理函数名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     SHELL_AGENCY_FUNC_NAME(_func)   agency##_func</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief shell代理函数定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param _func 被代理的函数</span></span><br><span class="line"><span class="comment"> * @param ... 代理参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     SHELL_AGENCY_FUNC(_func, ...) \</span></span><br><span class="line"><span class="meta">            void SHELL_AGENCY_FUNC_NAME(_func)(int p1, int p2, int p3, int p4, int p5, int p6, int p7) \</span></span><br><span class="line"><span class="meta">            &#123; _func(__VA_ARGS__); &#125;</span></span><br></pre></td></tr></table></figure><p>定义了代理函数，我们需要在代理函数里对参数进行处理，我称之为代理参数解析，参考letter shell的代理函数宏定义，shell会将终端输入的参数，解析成shell支持的基本参数数据，按顺序以<code>p1~p7</code>的参数传递进来，使用者需要定义代理参数解析器，可以为一个函数，或者宏，或者只是简单的数据处理，通过代理参数解析器，将<code>p1~p7</code>中对应的参数，转换成原函数需要的数据类型</p><p>letter shell默认实现了浮点参数的代理参数解析器，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief shell float型参数转换</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span>     SHELL_PARAM_FLOAT(x)            (*(float *)(&amp;x))</span></span><br></pre></td></tr></table></figure><p>有了代理函数和对应的代理参数解析器，就可以将代理函数导出到命令，从而可以实现任意参数类型的解析，letter shell提供了一个宏，可以一步定义代理函数和导出命令，定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * @brief shell 代理命令定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * @param _attr 命令属性</span></span><br><span class="line"><span class="comment"> * @param _name 命令名</span></span><br><span class="line"><span class="comment"> * @param _func 命令函数</span></span><br><span class="line"><span class="comment"> * @param _desc 命令描述</span></span><br><span class="line"><span class="comment"> * @param ... 代理参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> SHELL_EXPORT_CMD_AGENCY(_attr, _name, _func, _desc, ...) \</span></span><br><span class="line"><span class="meta">        SHELL_AGENCY_FUNC(_func, ##__VA_ARGS__) \</span></span><br><span class="line"><span class="meta">        SHELL_EXPORT_CMD(_attr, _name, SHELL_AGENCY_FUNC_NAME(_func), _desc)</span></span><br></pre></td></tr></table></figure><p>代理函数命令导出宏前4个参数和常规形式的命令导出一致，之后的参数即传递至目标函数的参数，对于shell直接支持的参数类型，直接写对应的<code>px(x为1~7)</code>即可，代理参数类型则需要使用代理参数解析器，如<code>SHELL_PARAM_FLOAT(p2)</code></p><h2 id="使用实例"><a href="#使用实例" class="headerlink" title="使用实例"></a>使用实例</h2><p>下面通过几个例子详细说明letter shell中代理函数的使用</p><h3 id="浮点参数"><a href="#浮点参数" class="headerlink" title="浮点参数"></a>浮点参数</h3><p>一个包含多个浮点参数的函数定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">int</span> a, <span class="type">float</span> b, <span class="type">int</span> c, <span class="type">float</span> d)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;a = %d, b = %f, c = %d, d = %f \r\n&quot;</span>, a, b, c, d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用letter shell默认实现的浮点参数解析器定义代理函数以及导出命令：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHELL_EXPORT_CMD_AGENCY(SHELL_CMD_TYPE(SHELL_TYPE_CMD_FUNC),</span><br><span class="line">test, test, test <span class="type">float</span> param,</span><br><span class="line">p1, SHELL_PARAM_FLOAT(p2), p3, SHELL_PARAM_FLOAT(p4));</span><br></pre></td></tr></table></figure><p>参数中，第一个参数和第三个参数时letter shell原生支持的参数类型，不需要代理解析，所以直接写<code>p1</code>和<code>p3</code>即可，而第二个和第四个参数是浮点型的数据，这里使用letter shell默认实现的浮点参数代理解析器对参数进行代理解析，写入<code>SHELL_PARAM_FLOAT(p2)</code>和<code>SHELL_PARAM_FLOAT(p4))</code></p><p>在命令行调用结果如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letter:/$ <span class="built_in">test</span> 12 12.5 854 7895.4</span><br><span class="line">a = 12, b = 12.500000, c = 854, d = 7895.399902</span><br><span class="line">Return: 34, 0x00000022</span><br></pre></td></tr></table></figure><h3 id="结构体参数"><a href="#结构体参数" class="headerlink" title="结构体参数"></a>结构体参数</h3><p>一个包含结构体参数的函数定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    <span class="type">int</span> a;</span><br><span class="line">    <span class="type">char</span> *b;</span><br><span class="line">&#125; Test;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">test</span><span class="params">(<span class="type">char</span> *name, Test *test)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;name: %s, a: %d, b: %s\r\n&quot;</span>, name, test-&gt;a, test-&gt;b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们直接使用C99复合文字的特性，作为代理参数解析器，可以导出命令如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SHELL_EXPORT_CMD_AGENCY(SHELL_CMD_TYPE(SHELL_TYPE_CMD_FUNC),</span><br><span class="line">test, test, test <span class="keyword">struct</span>,</span><br><span class="line">(<span class="type">char</span> *)p1, &amp;(Test)&#123;p2, (<span class="type">char</span> *)p3&#125;);</span><br></pre></td></tr></table></figure><p>导出的命令需要三个参数，第一个参数传递给<code>test</code>函数的形参<code>name</code>，第二个参数和第三个参数作为结构体<code>Test</code>的成员，通过复合文字特性的代理参数解析，生成结构体传递给<code>test</code>函数的形参<code>test</code></p><p>在命令行调用结果如下：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letter:/$ <span class="built_in">test</span> hello 123 <span class="built_in">test</span></span><br><span class="line">name: hello, a: 123, b: <span class="built_in">test</span></span><br><span class="line">Return: 30, 0x0000001e</span><br></pre></td></tr></table></figure><p>对于稍微复杂的结构体参数，还可以结合<a href="https://github.com/NevermindZZT/cson">cson</a>，以字符串的形式将json数据传入，然后使用cson将字符串代理解析成结构体参数</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>原理上来说，letter shell的代理函数并不复杂，本质上，就只是重新定义了一个函数，实现参数的转化，letter shell结合宏定义，简化了真个代理函数的定义流程，将函数定义和命令导出结合到一条宏，并和原先的宏定义保持类似的结构</p><p>总而言之，借助代理函数和代理参数解析，你可以使用letter shell实现任意参数的传递，将任意形式的函数作为shell命令导出</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/NevermindZZT/letter-shell&quot;&gt;letter shell&lt;/a</summary>
      
    
    
    
    <category term="letter shell" scheme="http://nevermindzzt.github.io/categories/letter-shell/"/>
    
    
    <category term="嵌入式 shell C" scheme="http://nevermindzzt.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F-shell-C/"/>
    
  </entry>
  
  <entry>
    <title>Letter shell 3.0 全新出发</title>
    <link href="http://nevermindzzt.github.io/2020/01/19/Letter%20shell%203.0%E5%85%A8%E6%96%B0%E5%87%BA%E5%8F%91/"/>
    <id>http://nevermindzzt.github.io/2020/01/19/Letter%20shell%203.0%E5%85%A8%E6%96%B0%E5%87%BA%E5%8F%91/</id>
    <published>2020-01-18T16:00:00.000Z</published>
    <updated>2022-02-27T10:53:36.654Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从我一开始写<a href="https://github.com/NevermindZZT/letter-shell">letter shell</a>已经一年多了，从1.x版本shell只能做命令解析，到2.x版本加入快捷键等功能，letter shell功能慢慢变多，但是体积也越来越大，似乎违背了我一开始只是想做一个超小型调试工具的想法，因此，我重新实现了letter shell 3.0，作为一个功能更加强大的版本，原先的2.x版本保留原有功能，继续维护。</p><h2 id="3-0改变了什么"><a href="#3-0改变了什么" class="headerlink" title="3.0改变了什么"></a>3.0改变了什么</h2><p>letter shell 3.0保留了2.x版本的所有功能，此次新增加了用户管理，权限管理，加入了对main函数形式和普通C函数命令的同时支持，加强了快捷键功能，此外，后续还会增加文件系统支持等其他功能</p><h2 id="移植"><a href="#移植" class="headerlink" title="移植"></a>移植</h2><p>letter shell 3.0在一直这一块基本保留了2.x的结构，原先使用2.x版本的如果想迁移，只需要简单的修改即可</p><ol><li><p>定义shell</p><p> 首先定义shell对象，3.0版本修改了结构体命名，从2.x版本迁移的话需要注意</p><p> 新建一个shell_port.c文件，定义shell</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Shell shell;</span><br></pre></td></tr></table></figure></li><li><p>申请内存</p><p> letter shell需要申请一片内存作为数据缓冲，申请内存大小取决于你希望命令行输入的最大长度和历史命令记录的数量，具体计算方式为<code>(历史命令最大数量 + 1) * 命令行输入最大长度</code></p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> buffer[<span class="number">512</span>];</span><br></pre></td></tr></table></figure></li><li><p>实现字符接收函数</p><p> 若使用<code>shellTask</code>，需要实现字符接收函数函数原型为<code>typedef signed char (*shellRead)(char *);</code>，该函数有一个输出参数，表示接收到的字符，返回值为0表示接收到了数据，-1表示没有接收到数据</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">signed</span> <span class="type">char</span> <span class="title function_">shellRead</span><span class="params">(<span class="type">char</span> *data)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> serialReceive(&amp;debugSerial, (<span class="type">uint8_t</span> *)data, <span class="number">1</span>, <span class="number">0</span>) == <span class="number">1</span> ? <span class="number">0</span> : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 若不使用<code>shellTask</code>，可不实现读函数</p></li><li><p>实现写字符发送函数</p><p> 需要实现的字符发送函数原型为<code>typedef void (*shellWrite)(const char);</code>，该函数有一个输入参数，表示需要发送的字符，无返回值</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">shellWrite</span><span class="params">(<span class="type">const</span> <span class="type">char</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    serialTransmit(&amp;debugSerial, (<span class="type">uint8_t</span> *)&amp;data, <span class="number">1</span>, <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>初始化shell</p><p> 对shell进行初始化</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shell.read = shellRead;</span><br><span class="line">shell.write = shellWrite;</span><br><span class="line">shellInit(&amp;shell, buffer, <span class="number">512</span>);</span><br></pre></td></tr></table></figure></li><li><p>建立shell任务</p><p> 对于使用操作系统的情况，需要建立<code>shellTask</code>任务，任务参数为定义的shell对象，任务栈大小可以根据需要分配，请以shell可能运行的函数所需要的最大栈为准，注意，请确认shell_cfg.h文件中的宏<code>SHELL_TASK_WHILE</code>打开</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">OSTaskCreate(shellTask, &amp;shell, ...);</span><br></pre></td></tr></table></figure><p> 对于不使用操作系统的情况，需要在主循环中调用<code>shellTask</code>，注意，此时shell_cfg.h文件中的宏<code>SHELL_TASK_WHILE</code>应该是关闭状态</p> <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">    shellTask(&amp;shell);</span><br><span class="line">    <span class="comment">// 其他任务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 其他情况，也可以不使用<code>shellTask</code>，但是需要在接收到字符时，主动调用<code>shellHandler</code></p></li></ol><h2 id="命令声明"><a href="#命令声明" class="headerlink" title="命令声明"></a>命令声明</h2><p>letter shell支持main函数命令，普通C函数命令，用户声明，变量声明，快捷键声明，通过宏<code>SHELL_EXPORT_XXX</code>导出</p><h3 id="main形式函数声明"><a href="#main形式函数声明" class="headerlink" title="main形式函数声明"></a>main形式函数声明</h3><p>main函数形式的函数原型为<code>int func(int argc, char *argv[])</code>，函数的所有参数都以字符串数组的形式传入<code>argv</code>参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func_main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *agrv[])</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%dparameter(s)\r\n&quot;</span>, argc);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">char</span> i = <span class="number">1</span>; i &lt; argc; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s\r\n&quot;</span>, argv[i]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(<span class="number">0</span>)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN), func, func_main, this is a main like function);</span><br></pre></td></tr></table></figure><p>其中，<code>SHELL_CMD_PERMISSION(0)</code>表示这个命令的权限为0，即无权限需要，所有用户都可以调用，<code>SHELL_CMD_TYPE(SHELL_TYPE_CMD_MAIN)</code>表示这个是一个main函数形式的命令，<code>func</code>表示命令名，即在终端调用的名字，<code>func_main</code>即函数名，最后一个参数是对这个命令的描述，可通过<code>help</code>明林查看</p><p>在终端中调用这个命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">letter:/$ func <span class="string">&quot;hello world&quot;</span></span><br><span class="line">2 parameter(s)</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><h3 id="普通C函数命令声明"><a href="#普通C函数命令声明" class="headerlink" title="普通C函数命令声明"></a>普通C函数命令声明</h3><p>普通C函数形式的命令是通过letter shell对参数进行解析，自动转换参数，然后执行函数，支持整数，浮点数，字符和字符串参数，支持变量作为参数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">func</span><span class="params">(<span class="type">int</span> i, <span class="type">char</span> ch, <span class="type">char</span> *str)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;input int: %d, char: %c, string: %s\r\n&quot;</span>, i, ch, str);</span><br><span class="line">&#125;</span><br><span class="line">SHELL_EXPORT_CMD(SHELL_CMD_PERMISSION(<span class="number">0</span>)|SHELL_CMD_TYPE(SHELL_TYPE_CMD_FUNC), func, func, this is a c like function);</span><br></pre></td></tr></table></figure><p>其中，<code>SHELL_CMD_TYPE(SHELL_TYPE_CMD_FUNC)</code>表示这是一个普通C函数形式的命令</p><p>在终端中调用这个命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">letter:/$ func 666 <span class="string">&#x27;A&#x27;</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line">input int: 666, char: A, string: hello world</span><br></pre></td></tr></table></figure><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><p>letter shell支持支持定义整数，浮点数，指针形式的变量，定义的变量可以通过<code>setVar</code>命令进行修改，可以以<code>$&#123;var&#125;</code>的形式作为参数传进命令中</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> testVar = <span class="number">256</span>;</span><br><span class="line">SHELL_EXPORT_VAR(SHELL_CMD_PERMISSION(<span class="number">0</span>)|SHELL_CMD_TYPE(SHELL_TYPE_VAR_INT), testVar, &amp;testVar, var <span class="keyword">for</span> test);</span><br></pre></td></tr></table></figure><p>其中，<code>SHELL_CMD_TYPE(SHELL_TYPE_VAR_INT)</code>表示这是一个<code>int</code>类型的变量，变量不是指针类型时，需要对变量取引用<code>&amp;testVar</code>，相应的，支持的变量类型和类型定义宏如下：</p><table><thead><tr><th>类型</th><th>宏</th></tr></thead><tbody><tr><td>char</td><td>SHELL_TYPE_VAR_CHAR</td></tr><tr><td>short</td><td>SHELL_TYPE_VAR_SHORT</td></tr><tr><td>int</td><td>SHELL_TYPE_VAR_INT</td></tr><tr><td>float</td><td>SHELL_TYPE_VAR_FLOAT</td></tr><tr><td>常量</td><td>SHELL_TYPE_VAL</td></tr></tbody></table><p>在终端中查看变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">letter:/$ testVar</span><br><span class="line">testVar = 256, 0x00000100</span><br></pre></td></tr></table></figure><p>修改变量</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">letter:/$ setVar testVar 65536</span><br><span class="line">testVar = 65536, 0x00010000</span><br></pre></td></tr></table></figure><p>变量作为命令参数</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">letter:/$ func &amp;testVar <span class="string">&#x27;A&#x27;</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line">input int: 256, char: A, string: hello world</span><br></pre></td></tr></table></figure><h3 id="用户声明"><a href="#用户声明" class="headerlink" title="用户声明"></a>用户声明</h3><p>letter shell 3.0版本新加入了用户管理，支持像定义命令一样定义用户</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SHELL_EXPORT_USER(SHELL_CMD_PERMISSION(<span class="number">0xFF</span>), root, admin, root user);</span><br></pre></td></tr></table></figure><p>其中<code>SHELL_CMD_PERMISSION(0xFF)</code>表示这个用户的权限，同命令的权限对应，当命令权限为0，或者用户权限同命令权限按位与不为0时，表明这个用户拥有该命令的权限，可以查看，执行，<code>root</code>表示用户名称，<code>admin</code>表示用户密码，留空时表示这个用户不需要设置密码，最后一个参数时对用户的描述</p><p>在终端切换用户</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">letter:/$ root</span><br><span class="line"></span><br><span class="line">Please input password:admin</span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>对于设置了密码的用户，也可以通过执行<code>&#123;user&#125; &#123;password&#125;</code>直接切换用户并校验密码</p><h3 id="按键声明"><a href="#按键声明" class="headerlink" title="按键声明"></a>按键声明</h3><p>letter shell 3.0增强了2.x版本的快捷键功能，最多支持四个字节键的快捷键</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SHELL_EXPORT_KEY(SHELL_CMD_PERMISSION(<span class="number">0</span>)|SHELL_CMD_ENABLE_UNCHECKED,</span><br><span class="line"><span class="number">0x1B5B337E</span>, shellDelete, delete);</span><br></pre></td></tr></table></figure><p>其中，<code>0x1B5B337E</code>表示这个按键的键值，即按下按键之后，终端会依次发送0x1B, 0x5B, 0x33, 0x7E四个字节，如果按键键值不足四个字节，以大端模式表示，低字节补0，比如tab键，键值为<code>0x0B000000</code></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;从我一开始写&lt;a href=&quot;https://github.com/NevermindZZT/letter-shell&quot;&gt;letter sh</summary>
      
    
    
    
    <category term="letter shell" scheme="http://nevermindzzt.github.io/categories/letter-shell/"/>
    
    
    <category term="嵌入式" scheme="http://nevermindzzt.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="STM32" scheme="http://nevermindzzt.github.io/tags/STM32/"/>
    
    <category term="C" scheme="http://nevermindzzt.github.io/tags/C/"/>
    
    <category term="shell" scheme="http://nevermindzzt.github.io/tags/shell/"/>
    
  </entry>
  
  <entry>
    <title>Android 技巧总结</title>
    <link href="http://nevermindzzt.github.io/2019/10/21/Andorid%20%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://nevermindzzt.github.io/2019/10/21/Andorid%20%E6%8A%80%E5%B7%A7%E6%80%BB%E7%BB%93/</id>
    <published>2019-10-20T16:00:00.000Z</published>
    <updated>2020-07-07T04:56:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ADB"><a href="#ADB" class="headerlink" title="ADB"></a>ADB</h2><ul><li><p>隐藏虚拟键及顶部状态栏：</p><p>adb shell settings put global policy_control immersive.full&#x3D;*</p></li><li><p>隐藏顶部状态栏（底部虚拟键会显示）：</p><p>adb shell settings put global policy_control immersive.status&#x3D;*</p></li><li><p>隐藏虚拟键（顶部状态栏会显示）：</p><p>adb shell settings put global policy_control immersive.navigation&#x3D;*</p></li><li><p>恢复原来的设置：</p><p>adb shell settings put global policy_control null</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;ADB&quot;&gt;&lt;a href=&quot;#ADB&quot; class=&quot;headerlink&quot; title=&quot;ADB&quot;&gt;&lt;/a&gt;ADB&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;隐藏虚拟键及顶部状态栏：&lt;/p&gt;
&lt;p&gt;adb shell settings put global policy_</summary>
      
    
    
    
    <category term="Android" scheme="http://nevermindzzt.github.io/categories/Android/"/>
    
    
    <category term="Android" scheme="http://nevermindzzt.github.io/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>在C语言上优雅地使用json</title>
    <link href="http://nevermindzzt.github.io/2019/08/29/%E5%9C%A8C%E8%AF%AD%E8%A8%80%E4%B8%8A%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8json/"/>
    <id>http://nevermindzzt.github.io/2019/08/29/%E5%9C%A8C%E8%AF%AD%E8%A8%80%E4%B8%8A%E4%BC%98%E9%9B%85%E5%9C%B0%E4%BD%BF%E7%94%A8json/</id>
    <published>2019-08-28T16:00:00.000Z</published>
    <updated>2020-07-07T04:56:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>json是目前最为流行的文本数据传输格式，特别是在网络通信上广泛应用，随着物联网的兴起，在嵌入式设备上，也需要开始使用json进行数据传输，那么，如何快速简洁地用C语言进行json的序列化和反序列化呢</p><span id="more"></span><p>当前，应用最广泛的C语言json解析库当属<a href="https://github.com/kbranigan/cJSON">cJSON</a>，但是，使用cJSON读json进行序列化和反序列化，需要根据key一个一个进行处理，会导致代码冗余，逻辑性不强，哪有没有更好的方法呢</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>在Android平台，一般会使用<a href="https://github.com/google/gson">gson</a>等工具解析json，这些工具将json直接映射成对象，在C语言上使用对象的概念，我们需要借助结构体，然而，最大的问题在于，C语言没有高级语言具有的反射机制，直接从json映射到结构体对象几乎是不可能的</p><p>怎么解决呢，既然C语言没有反射机制，那么我们可以自己定义一套类似于反射的机制，这里我将其称之为结构体数据模型，在数据模型中，我们需要准确地描述结构体的特征，包括结构体各成员的名称，类型，在结构体中的偏移，有了这些，我们可以在解析josn的时候，将解析得到的数据直接写入到对应的内存里面去，或者是在序列化的时候，直接从对应的内存中读取数据，进行处理</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p><a href="https://github.com/NevermindZZT/cson">CSON</a>正是采用上面说到的思路，使用数据模型对结构体进行描述，然后基于cJSON，根据数据模型进行解析，将解析得到的数据直接写入到对应的内存区域，从而实现从json到结构体对象的映射</p><p>CSON最基本的数据模型定义如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">cson_model</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    CsonType type;                      <span class="comment">/**&lt; 数据类型 */</span></span><br><span class="line">    <span class="type">char</span> *key;                          <span class="comment">/**&lt; 元素键值 */</span></span><br><span class="line">    <span class="type">short</span> offset;                       <span class="comment">/**&lt; 元素偏移 */</span></span><br><span class="line">&#125; CsonModel;</span><br></pre></td></tr></table></figure><p>通过<code>type</code>描述结构体成员的数据类型，<code>key</code>描述该成员在json中对应的字段，<code>offset</code>描述该结构体成员在结构体中的偏移，CSON在解析json的时候，根据<code>type</code>调用相应的cJSON API并传递<code>key</code>作为参数，得到解析出的数据，然后根据<code>offset</code>将数据写入到对应的内存空间</p><p>比如说这样一个结构体：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">project</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该结构体包含两个成员，对于成员<code>id</code>，我们使用数据模型对其进行描述<code>&#123;.type=CSON_TYPE_CHAR, key=&quot;id&quot;, offset=0&#125;</code>，对于结构体的每个成员，都进行数据模型的定义，就可以得到一个完整的结构体数据模型，CSON会根据这个模型，进行解析</p><p>因为是通过直接写内存的方式，所以在写不同类型的量到内存中时，会多次用到强制转型，导致CSON中赋值的代码都类似于<code>*(int *)((int)obj + model[i].offset) = (int)csonDecodeNumber(json, model[i].key);</code></p><p>当然，上面说到的数据模型，只适用于基本数据类型的数据，对于子结构体，链表，数组等，需要对数据模型的定义进行扩充，有兴趣的朋友可以直接阅读CSON源码</p><h2 id="CSON使用实例"><a href="#CSON使用实例" class="headerlink" title="CSON使用实例"></a>CSON使用实例</h2><h3 id="声明结构体"><a href="#声明结构体" class="headerlink" title="声明结构体"></a>声明结构体</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 项目结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">project</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> *name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 仓库结构体 */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hub</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> id;</span><br><span class="line">    <span class="type">char</span> *user;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">project</span> *<span class="title">cson</span>;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="定义数据模型"><a href="#定义数据模型" class="headerlink" title="定义数据模型"></a>定义数据模型</h3><p>对每一个需要使用cson的结构体，都需要定义相对应的数据模型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 项目结构体数据模型 */</span></span><br><span class="line">CsonModel projectModel[] =</span><br><span class="line">&#123;</span><br><span class="line">    CSON_MODEL_OBJ(<span class="keyword">struct</span> project),</span><br><span class="line">    CSON_MODEL_INT(<span class="keyword">struct</span> project, id),</span><br><span class="line">    CSON_MODEL_STRING(<span class="keyword">struct</span> project, name),</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/** 仓库结构体数据模型 */</span></span><br><span class="line">CsonModel hubModel[] =</span><br><span class="line">&#123;</span><br><span class="line">    CSON_MODEL_OBJ(<span class="keyword">struct</span> hub),</span><br><span class="line">    CSON_MODEL_INT(<span class="keyword">struct</span> hub, id),</span><br><span class="line">    CSON_MODEL_STRING(<span class="keyword">struct</span> hub, user),</span><br><span class="line">    CSON_MODEL_STRUCT(<span class="keyword">struct</span> hub, cson, projectModel, <span class="keyword">sizeof</span>(projectModel)/<span class="keyword">sizeof</span>(CsonModel))</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="使用CSON解析"><a href="#使用CSON解析" class="headerlink" title="使用CSON解析"></a>使用CSON解析</h3><p>只需要定义好数据模型，就可以使用CSON读json进行序列化和反序列化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">csonDemo</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *jsonDemo = <span class="string">&quot;&#123;\&quot;id\&quot;: 1, \&quot;user\&quot;: \&quot;Letter\&quot;, \&quot;cson\&quot;: &#123;\&quot;id\&quot;: 2, \&quot;name\&quot;: \&quot;cson\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 解析json */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">hub</span> *<span class="title">pHub</span> =</span> csonDecode(jsonDemo, hubModel, <span class="keyword">sizeof</span>(hubModel)/<span class="keyword">sizeof</span>(CsonModel));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hub: id: %d, user: %s, project id: %d, project name: %s\r\n&quot;</span>,</span><br><span class="line">        pHub-&gt;id, pHub-&gt;user, pHub-&gt;cson-&gt;id, pHub-&gt;cson-&gt;name);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 序列化对象 */</span></span><br><span class="line">    <span class="type">char</span> *formatJson = csonEncodeFormatted(pHub, hubModel, <span class="keyword">sizeof</span>(hubModel)/<span class="keyword">sizeof</span>(CsonModel));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;format json: %s\r\n&quot;</span>, formatJson);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 释放结构体对象 */</span></span><br><span class="line">    csonFree(pHub, hubModel, <span class="keyword">sizeof</span>(hubModel)/<span class="keyword">sizeof</span>(CsonModel));</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 释放序列化生成的json字符串 */</span></span><br><span class="line">    csonFreeJson(formatJson);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hub: id: 1, user: Letter, project id: 2, project name: cson</span><br><span class="line">format json: &#123;</span><br><span class="line">        &quot;id&quot;:   1,</span><br><span class="line">        &quot;user&quot;: &quot;Letter&quot;,</span><br><span class="line">        &quot;cson&quot;: &#123;</span><br><span class="line">                &quot;id&quot;:   2,</span><br><span class="line">                &quot;name&quot;: &quot;cson&quot;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，无论是解析json，还是序列化结构体到json，在使用CSON的情况下，都只需要一行代码就可以解决，同样的操作，在使用原生cJSON的情况下，你可能需要多次判断，解析元素</p><h2 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址"></a>项目地址</h2><p>CSON项目已经发布到Github，<a href="https://github.com/NevermindZZT/cson">点击查看</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;json是目前最为流行的文本数据传输格式，特别是在网络通信上广泛应用，随着物联网的兴起，在嵌入式设备上，也需要开始使用json进行数据传输，那么，如何快速简洁地用C语言进行json的序列化和反序列化呢&lt;/p&gt;</summary>
    
    
    
    <category term="嵌入式" scheme="http://nevermindzzt.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="http://nevermindzzt.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="STM32" scheme="http://nevermindzzt.github.io/tags/STM32/"/>
    
    <category term="C" scheme="http://nevermindzzt.github.io/tags/C/"/>
    
    <category term="json" scheme="http://nevermindzzt.github.io/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>Android 自定义颜色选择器的实现</title>
    <link href="http://nevermindzzt.github.io/2019/07/19/Android%20%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A2%9C%E8%89%B2%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
    <id>http://nevermindzzt.github.io/2019/07/19/Android%20%E8%87%AA%E5%AE%9A%E4%B9%89%E9%A2%9C%E8%89%B2%E9%80%89%E6%8B%A9%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0/</id>
    <published>2019-07-18T16:00:00.000Z</published>
    <updated>2020-07-07T04:56:46.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>某日，突然产生想法，给我自己做的纪念日的APP加一个主题色的功能，那自然就需要用到颜色选择器了，在网上搜索了一圈，没找到自己想要的，于是干脆就自己做一个吧。刚好最近也在研究Kotlin，于是就拿Kotlin写了一个简单的颜色选择器</p><span id="more"></span><p>先上效果图：</p><p><img src="https://s1.ax1x.com/2020/04/10/GIXGRJ.png" alt="img_android_color_picker.png"></p><h2 id="颜色盘"><a href="#颜色盘" class="headerlink" title="颜色盘"></a>颜色盘</h2><p>颜色选择器最基本的元素就是单个的颜色控件了，简单的颜色控件设计只需要一个单色的圆加上边框就行，就直接用<code>View</code>画了</p><p>首先定义好<code>ColorPane</code>所需要的自定义属性，包括颜色属性，边框颜色和边框宽度</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span> = <span class="string">&quot;ColorPane&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;color&quot;</span> <span class="attr">format</span>=<span class="string">&quot;color&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;strokeColor&quot;</span> <span class="attr">format</span>=<span class="string">&quot;color&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;strokeWidth&quot;</span> <span class="attr">format</span>=<span class="string">&quot;dimension&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后新建<code>ColorPane</code>类继承自<code>View</code>，在构造器中，处理从xml中解析的相关属性</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span> &#123;</span><br><span class="line">    <span class="keyword">val</span> attrArray = context.obtainStyledAttributes(attrs, R.styleable.ColorPane)</span><br><span class="line"></span><br><span class="line">    color = attrArray.getColor(R.styleable.ColorPane_color, <span class="number">0</span>)</span><br><span class="line">    strokeColor = attrArray.getColor(R.styleable.ColorPane_strokeColor, <span class="number">0</span>)</span><br><span class="line">    strokeWidth = attrArray.getDimension(R.styleable.ColorPane_strokeWidth, <span class="number">0f</span>)</span><br><span class="line"></span><br><span class="line">    attrArray.recycle()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重写父类的<code>onDraw</code>方法，在画布上画出一个实心圆和边框，<code>onDraw</code>方法如下：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">onDraw</span><span class="params">(canvas: <span class="type">Canvas</span>?)</span></span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.onDraw(canvas)</span><br><span class="line"></span><br><span class="line">    paint.color = color</span><br><span class="line">    paint.style = Paint.Style.FILL</span><br><span class="line"></span><br><span class="line">    canvas?.drawCircle(width.toFloat() / <span class="number">2</span>, height.toFloat() / <span class="number">2</span>,</span><br><span class="line">        (min(width, height) / <span class="number">2</span> - <span class="keyword">if</span> (strokeWidth &gt; <span class="number">0</span>) <span class="number">1</span> <span class="keyword">else</span> <span class="number">0</span>).toFloat(), paint)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (strokeWidth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        paint.color = strokeColor</span><br><span class="line">        paint.style = Paint.Style.STROKE</span><br><span class="line">        paint.strokeWidth = strokeWidth</span><br><span class="line">        canvas?.drawCircle(width.toFloat() / <span class="number">2</span>, height.toFloat() / <span class="number">2</span>,</span><br><span class="line">            (min(width, height) / <span class="number">2</span>).toFloat() - (strokeWidth) / <span class="number">2</span>, paint)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (checked) &#123;</span><br><span class="line">        <span class="keyword">val</span> bright = (color.and(<span class="number">0x00FF0000</span>).ushr(<span class="number">16</span>) * <span class="number">0.3</span></span><br><span class="line">                + color.and(<span class="number">0x0000FF00</span>).ushr(<span class="number">8</span>) * <span class="number">0.6</span></span><br><span class="line">                + color.and(<span class="number">0x000000FF</span>) * <span class="number">0.1</span>)</span><br><span class="line">        <span class="keyword">if</span> (bright &gt; <span class="number">0x80</span> || color.toLong().and(<span class="number">0xFF000000</span>).ushr(<span class="number">24</span>) &lt; <span class="number">0x20</span>) &#123;</span><br><span class="line">            paint.color = Color.BLACK</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            paint.color = Color.WHITE</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">val</span> lineWidth = height.toFloat() / <span class="number">20</span></span><br><span class="line">        <span class="keyword">val</span> offsetX = -width.toFloat() / <span class="number">32</span></span><br><span class="line">        <span class="keyword">val</span> offsetY = height.toFloat() / <span class="number">8</span></span><br><span class="line">        paint.style = Paint.Style.STROKE</span><br><span class="line">        paint.strokeWidth = lineWidth</span><br><span class="line">        canvas?.drawLine(width.toFloat() / <span class="number">3</span> + offsetX, height.toFloat() / <span class="number">3</span> + offsetY,</span><br><span class="line">            width.toFloat() / <span class="number">2</span> + lineWidth / <span class="number">2.828f</span> + offsetX,</span><br><span class="line">            width.toFloat() / <span class="number">2</span> + lineWidth / <span class="number">2.828f</span> + offsetY, paint)</span><br><span class="line">        canvas?.drawLine(width.toFloat() / <span class="number">2</span> + offsetX, height.toFloat() / <span class="number">2</span> + offsetY,</span><br><span class="line">            width.toFloat() / <span class="number">4</span> * <span class="number">3</span> + offsetX, width.toFloat() / <span class="number">4</span> + offsetY, paint)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，通过对<code>checked</code>的判断，以确定当前控件是否被选中，如果被选中，计算当前颜色的深度，然后在画布中绘制一个勾</p><h2 id="颜色选择视图"><a href="#颜色选择视图" class="headerlink" title="颜色选择视图"></a>颜色选择视图</h2><p>颜色选择器视图可以使用<code>GridView</code>实现，将<code>ColorPane</code>作为<code>GridView</code>的子项，同样的，首先自定义一些属性</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">&quot;ColorPickerView&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;colorResource&quot;</span> <span class="attr">format</span>=<span class="string">&quot;reference&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;colorPaneSize&quot;</span> <span class="attr">format</span>=<span class="string">&quot;dimension&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;colorPaneStroke&quot;</span> <span class="attr">format</span>=<span class="string">&quot;color&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;horizontalSpacing&quot;</span> <span class="attr">format</span>=<span class="string">&quot;dimension&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;verticalSpacing&quot;</span> <span class="attr">format</span>=<span class="string">&quot;dimension&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">attr</span> <span class="attr">name</span>=<span class="string">&quot;numColumns&quot;</span> <span class="attr">format</span>=<span class="string">&quot;integer&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后定义视图的布局，这里我使用了一个<code>LinearLayout</code>作为父布局，实际上可以直接继承<code>GridView</code>实现的，如果直接继承<code>GridView</code>，则不需要这个布局文件，在加一层父布局的好处是可以添加一些额外的东西</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">&quot;http://schemas.android.com/apk/res/android&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">&quot;vertical&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">GridView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">&quot;@+id/grid_view&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">&quot;wrap_content&quot;</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:numColumns</span>=<span class="string">&quot;auto_fit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后新建<code>ColorPickerView</code>继承自<code>LinearLayout</code>，在构造器的初始化代码中进行初始化操作</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">init</span> &#123;</span><br><span class="line">    LayoutInflater.from(context).inflate(R.layout.layout_color_pick_view, <span class="keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    gridView = findViewById(R.id.grid_view)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> attrArray = context.obtainStyledAttributes(attrs, R.styleable.ColorPickerView)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">val</span> colorResourceId = attrArray.getResourceId(R.styleable.ColorPickerView_colorResource, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    colorPaneSize = attrArray.getDimension(R.styleable.ColorPickerView_colorPaneSize, <span class="number">0f</span>)</span><br><span class="line">    <span class="keyword">val</span> horizontalSpacing = attrArray.getDimension(R.styleable.ColorPickerView_horizontalSpacing, <span class="number">0f</span>)</span><br><span class="line">    <span class="keyword">val</span> verticalSpacing = attrArray.getDimension(R.styleable.ColorPickerView_verticalSpacing, <span class="number">0f</span>)</span><br><span class="line">    <span class="keyword">val</span> numColumns = attrArray.getInt(R.styleable.ColorPickerView_numColumns, <span class="number">0</span>)</span><br><span class="line">    colorPaneStroke = attrArray.getColor(R.styleable.ColorPickerView_colorPaneStroke, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    attrArray.recycle()</span><br><span class="line"></span><br><span class="line">    viewWidth = colorPaneSize * numColumns + horizontalSpacing * (numColumns - <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (colorResourceId != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">val</span> colorStrings = context.resources.getStringArray(colorResourceId)</span><br><span class="line">        setColors(colorStrings)</span><br><span class="line">    &#125;</span><br><span class="line">    gridView?.onItemClickListener = <span class="keyword">this</span></span><br><span class="line">    gridView?.columnWidth = colorPaneSize.toInt()</span><br><span class="line">    gridView?.horizontalSpacing = horizontalSpacing.toInt()</span><br><span class="line">    gridView?.verticalSpacing = verticalSpacing.toInt()</span><br><span class="line">    <span class="keyword">if</span> (numColumns != <span class="number">0</span>) &#123;</span><br><span class="line">        gridView?.numColumns = numColumns</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们还需要实现一个适配器，提供给<code>GridView</code>，适配器的代码如下</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ColorPickerListAdapter</span></span></span><br><span class="line">        (context: Context?, colors: ArrayList&lt;<span class="built_in">Int</span>&gt;, colorPaneSize: <span class="built_in">Int</span>, colorPaneStroke: <span class="built_in">Int</span>):</span><br><span class="line">        BaseAdapter() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">var</span> colorPaneList: MutableList&lt;ColorPane&gt; = mutableListOf()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">init</span> &#123;</span><br><span class="line">        <span class="keyword">val</span> layoutParams: ViewGroup.LayoutParams =</span><br><span class="line">            <span class="keyword">if</span> (colorPaneSize == <span class="number">0</span>) &#123;</span><br><span class="line">                 ViewGroup.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,</span><br><span class="line">                        ViewGroup.LayoutParams.MATCH_PARENT)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ViewGroup.LayoutParams(colorPaneSize, colorPaneSize)</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">for</span> (color <span class="keyword">in</span> colors) &#123;</span><br><span class="line">            <span class="keyword">val</span> colorPane = ColorPane(context!!)</span><br><span class="line">            colorPane.layoutParams = layoutParams</span><br><span class="line">            <span class="keyword">if</span> (colorPaneSize == <span class="number">0</span>) &#123;</span><br><span class="line">                colorPane.layoutParams = ViewGroup.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,</span><br><span class="line">                        ViewGroup.LayoutParams.WRAP_CONTENT)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                colorPane.layoutParams = ViewGroup.LayoutParams(colorPaneSize, colorPaneSize)</span><br><span class="line">            &#125;</span><br><span class="line">            colorPane.color = color</span><br><span class="line">            colorPane.strokeColor = colorPaneStroke</span><br><span class="line">            colorPane.strokeWidth = colorPaneSize.toFloat() / <span class="number">32</span></span><br><span class="line">            colorPaneList.add(colorPane)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItem</span><span class="params">(position: <span class="type">Int</span>)</span></span>: Any &#123;</span><br><span class="line">        <span class="keyword">return</span> colorPaneList[position]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getCount</span><span class="params">()</span></span>: <span class="built_in">Int</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> colorPaneList.size</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getView</span><span class="params">(position: <span class="type">Int</span>, convertView: <span class="type">View</span>?, parent: <span class="type">ViewGroup</span>?)</span></span>: View &#123;</span><br><span class="line">        <span class="keyword">return</span> colorPaneList[position]</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">getItemId</span><span class="params">(position: <span class="type">Int</span>)</span></span>: <span class="built_in">Long</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> position.toLong()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">setItemColor</span><span class="params">(position: <span class="type">Int</span>, color: <span class="type">Int</span>)</span></span> &#123;</span><br><span class="line">        colorPaneList[position].color = color</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的代码已同步至GitHub，可以<a href="https://github.com/NevermindZZT/ColorPickerDemo">前往GitHub查看</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;某日，突然产生想法，给我自己做的纪念日的APP加一个主题色的功能，那自然就需要用到颜色选择器了，在网上搜索了一圈，没找到自己想要的，于是干脆就自己做一个吧。刚好最近也在研究Kotlin，于是就拿Kotlin写了一个简单的颜色选择器&lt;/p&gt;</summary>
    
    
    
    <category term="Android" scheme="http://nevermindzzt.github.io/categories/Android/"/>
    
    
    <category term="Android" scheme="http://nevermindzzt.github.io/tags/Android/"/>
    
    <category term="Kotlin" scheme="http://nevermindzzt.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>C语言复合文字的使用</title>
    <link href="http://nevermindzzt.github.io/2019/04/03/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E5%90%88%E6%96%87%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://nevermindzzt.github.io/2019/04/03/C%E8%AF%AD%E8%A8%80%E5%A4%8D%E5%90%88%E6%96%87%E5%AD%97%E7%9A%84%E4%BD%BF%E7%94%A8/</id>
    <published>2019-04-02T16:00:00.000Z</published>
    <updated>2020-07-07T04:56:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在一些高级语言中，有一种定义函数的方法，如Python中，可以定义<code>def func(arg1, arg2=2)</code>，这样可以定义函数形参的默认值，对于一些参数多，但是大多数参数基本不会变动的函数来说极其有用，那么，C语言是否也可以实现这样的功能呢</p><span id="more"></span><p>在C99的标准中，增加了一个新的特性，复合文字(composite literal)，很奇怪，这个特性是如此的好用，可是在我的身边几乎没有人知道这个东西</p><h1 id="复合文字应用"><a href="#复合文字应用" class="headerlink" title="复合文字应用"></a>复合文字应用</h1><h2 id="数组操作"><a href="#数组操作" class="headerlink" title="数组操作"></a>数组操作</h2><p>假设一个场景，有一个函数<code>void func(char *p, short size)</code>，你希望传递一个有数据的数组进去，那么可以这样</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> <span class="built_in">array</span>[<span class="number">4</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">func(<span class="built_in">array</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>你需要先创建数据，然后给数组里面的数据复制，最后将数据传递给函数，但是在应用了复合文字之后，你可以这样做</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">func((<span class="type">char</span> [])&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;, <span class="number">4</span>);</span><br></pre></td></tr></table></figure><p>如何，数组像是一个基本数据类型的常量一样，被直接传递给了函数，当然，你也可以用这个机制，直接将一个数组作为函数的返回值返回</p><h2 id="结构体操作"><a href="#结构体操作" class="headerlink" title="结构体操作"></a>结构体操作</h2><p>使用复合文字特性操作数组，虽然看起来确实简化了一些操作，但是实际一看，好像对程序并没有多大提升，但是，当复合文字碰到结构体的时候，真正的作用就体现出来了</p><p>正如我在前言里说到的，使用复合文字结合结构体，我们可以实现参数默认值功能，特别是对于一些初始化操作，可以大大简化函数的使用。</p><p>以嵌入式中常用的串口为例，我们一般初始化串口时，要设置波特率，字长，起始位，校验，流控等，因而，我们可以要写一个参数表极长的函数，或者定义一个结构体，一个一个设置结构体成员的值，然而，一般情况下，上面说到的这些参数都是有一个默认值的，所以如果能定义一个函数，只需要给需要设置的参数，剩下的为默认值就好了，这就到复合文字大显身手的时候了</p><p>定义结构体(STM32 HAL库)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">uint32_t</span> BaudRate;</span><br><span class="line">    <span class="type">uint32_t</span> WordLength;</span><br><span class="line">    <span class="type">uint32_t</span> StopBits;</span><br><span class="line">    <span class="type">uint32_t</span> Parity;</span><br><span class="line">    <span class="type">uint32_t</span> Mode;</span><br><span class="line">    <span class="type">uint32_t</span> HwFlowCtl;</span><br><span class="line">    <span class="type">uint32_t</span> OverSampling;</span><br><span class="line">&#125;UART_InitTypeDef;</span><br></pre></td></tr></table></figure><p>定义初始化函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> _SerialInit(<span class="type">char</span> uart, UART_InitTypeDef init)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/** 初始化操作 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般来说，利用复合文字，我们可以使用这种形式调用函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_SerialInit(<span class="number">1</span>, (UART_InitTypeDef)&#123;BaudRate=<span class="number">115200</span>, .WordLength=UART_WORDLENGTH_8B, <span class="comment">/** 其他参数 */</span>&#125;);</span><br></pre></td></tr></table></figure><p>好像还是没有事项参数默认值啊，不急，我们只差一个宏定义了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> serialInit(uart, ...) \</span></span><br><span class="line"><span class="meta">        _SerialInit( \</span></span><br><span class="line"><span class="meta">            uart, \</span></span><br><span class="line"><span class="meta">            (UART_InitTypeDef)&#123; \</span></span><br><span class="line"><span class="meta">                .BaudRate = 115200, \</span></span><br><span class="line"><span class="meta">                .WordLength = UART_WORDLENGTH_8B, \</span></span><br><span class="line"><span class="meta">                .StopBits = UART_STOPBITS_1, \</span></span><br><span class="line"><span class="meta">                .Parity = UART_PARITY_NONE, \</span></span><br><span class="line"><span class="meta">                .Mode = UART_MODE_TX_RX, \</span></span><br><span class="line"><span class="meta">                .HwFlowCtl = UART_HWCONTROL_NONE, \</span></span><br><span class="line"><span class="meta">                .OverSampling = UART_OVERSAMPLING_16, \</span></span><br><span class="line"><span class="meta">                ##__VA_ARGS__, \</span></span><br><span class="line"><span class="meta">            &#125;)</span></span><br></pre></td></tr></table></figure><p>好了，我们在这个宏中设置所有参数的默认值，我们调用的时候，就可以只设置我们需要设置的参数了</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">serialInit(<span class="number">1</span>);                              <span class="comment">/** 所有参数使用默认值 */</span></span><br><span class="line">serialInit(<span class="number">1</span>, .BaudRate=<span class="number">19200</span>);             <span class="comment">/** 重设置波特率 */</span></span><br><span class="line">serialInit(<span class="number">1</span>, .BaueRate=<span class="number">19200</span>, .StopBits = UART_STOPBITS_2) <span class="comment">/** 重设波特率和停止位 */</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>C语言其实也一直在成长，每一次更新都会引入一些新的特性，这些特性无疑是为了更好的使用这门语言，所以即使了解一些新的特性，可以让我们写出更高效的代码</p><p>PS：突然萌生想法，可不可以利用这个特性实现类似C++, JAVA等语言中的函数重载</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在一些高级语言中，有一种定义函数的方法，如Python中，可以定义&lt;code&gt;def func(arg1, arg2=2)&lt;/code&gt;，这样可以定义函数形参的默认值，对于一些参数多，但是大多数参数基本不会变动的函数来说极其有用，那么，C语言是否也可以实现这样的功能呢&lt;/p&gt;</summary>
    
    
    
    <category term="C" scheme="http://nevermindzzt.github.io/categories/C/"/>
    
    
    <category term="C" scheme="http://nevermindzzt.github.io/tags/C/"/>
    
  </entry>
  
  <entry>
    <title>使用VS Code打造完美的嵌入式IDE</title>
    <link href="http://nevermindzzt.github.io/2019/03/15/%E4%BD%BF%E7%94%A8VS%20Code%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8E%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8FIDE/"/>
    <id>http://nevermindzzt.github.io/2019/03/15/%E4%BD%BF%E7%94%A8VS%20Code%E6%89%93%E9%80%A0%E5%AE%8C%E7%BE%8E%E7%9A%84%E5%B5%8C%E5%85%A5%E5%BC%8FIDE/</id>
    <published>2019-03-14T16:00:00.000Z</published>
    <updated>2020-07-07T04:56:46.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在我刚开始接触STM32的时候，使用的keil作为IDE，由于在这之前，我使用过VS, 使用过eclipse, 因而在我使用keil之后，实在难以忍受keil编辑器简陋的功能，可以说是极其糟糕的写代码体验</p><p>之后，我尝试过各种IDE，使用eclipse + keil，结果发现eclipse对C语言的支持也是鸡肋，使用emBits + gcc，需要和其他人协同的话就比较麻烦，之后发现了platformIO，也是使用gcc作为编译器，不过只支持HAL库</p><p>最后，通过使用VS Code + keil的方式，完美解决了写代码的体验问题，以及工程协作问题</p><span id="more"></span><p>其实网上使用VS Code作为编辑器，keil作为编译器的教程很多，不过基本都是需要在VS Code中编辑，然后在keil中编译，下载，调试，本文就要实现编辑，编译，下载，调试，全部使用VS Code</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><ul><li>VS Code</li><li>keil</li><li>python</li><li>C&#x2F;C++(VS Code 插件)</li><li>Cortex-Debug(VS Code 插件)</li><li>其他VS Code插件(提升体验)</li></ul><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><p>正式写代码之前，首先需要建立好一个工程，这个需要使用keil完成，包括工程配置，文件添加…</p><h1 id="编辑"><a href="#编辑" class="headerlink" title="编辑"></a>编辑</h1><p>在安装好VS Code插件之后，VS Code编写C代码本身体验就已经很好了，但是，因为我们使用的是keil环境，所以需要配置头文件包含，宏定义等</p><p>在工程路径的.vscode文件夹下打开c_cpp_properties.json文件，没有自己新建一个，内容配置如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;STM32&quot;</span>,</span><br><span class="line">            <span class="string">&quot;includePath&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;C:/Program Files (x86)/keil/ARM/ARMCC/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;browse&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;limitSymbolsToIncludedHeaders&quot;</span>: true,</span><br><span class="line">                <span class="string">&quot;databaseFilename&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;/.vscode/.browse.c_cpp.db&quot;</span>,</span><br><span class="line">                <span class="string">&quot;path&quot;</span>: [</span><br><span class="line">                    <span class="string">&quot;C:/Program Files (x86)/keil/ARM/ARMCC/**&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;&quot;</span></span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;defines&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;_DEBUG&quot;</span>,</span><br><span class="line">                <span class="string">&quot;UNICODE&quot;</span>,</span><br><span class="line">                <span class="string">&quot;_UNICODE&quot;</span>,</span><br><span class="line">                <span class="string">&quot;__CC_ARM&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;intelliSenseMode&quot;</span>: <span class="string">&quot;msvc-x64&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，需要在<code>includePath</code>和<code>path</code>中添加头文件路径，<code>$&#123;workspaceFolder&#125;/**</code>是工程路径，不用改动，额外需要添加的是keil的头文件路径</p><p>然后在<code>defines</code>中添加宏，也就是在keil的Options for Target的C++选项卡中配置的宏</p><p>然后就可以体验VS Code强大的代码提示，函数跳转等功能了(甩keil的编辑器一整个时代)</p><h1 id="编译、烧录"><a href="#编译、烧录" class="headerlink" title="编译、烧录"></a>编译、烧录</h1><p>编译和烧录通过VS Code的Task功能实现，通过Task，使用命令行的方式调用keil进行编译和烧录</p><p>keil本身就支持命令行调用，具体可以参考keil的手册，这里就不多说了，但是问题在于，使用命令行调用keil，不管是什么操作，他的输出都不会输出到控制台上!!!(要你这命令行支持有何用)</p><p>不过好在，keil支持输出到文件中，那我们就只能利用这个做点骚操作了————一边执行命令，一边读取文件内容并打印到控制台，从而就实现了输出在控制台上，我们就能直接在VS Code中看到编译过程了</p><p>为此，我编写了一个Python脚本，实现keil的命令行调用并同时读取文件输出到控制台</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment"># -*- coding:UTF-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">runing = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readfile</span>(<span class="params">logfile</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(logfile, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(logfile, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">while</span> runing:</span><br><span class="line">            line = f.readline(<span class="number">1000</span>)</span><br><span class="line">            <span class="keyword">if</span> line != <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">                line = line.replace(<span class="string">&#x27;\\&#x27;</span>, <span class="string">&#x27;/&#x27;</span>)</span><br><span class="line">                <span class="built_in">print</span>(line, end = <span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    modulePath = os.path.abspath(os.curdir)</span><br><span class="line">    logfile = modulePath + <span class="string">&#x27;/build.log&#x27;</span></span><br><span class="line">    cmd = <span class="string">&#x27;\&quot;C:/Program Files (x86)/keil/UV4/UV4.exe\&quot; &#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="built_in">len</span>(sys.argv)):</span><br><span class="line">        cmd += sys.argv[i] + <span class="string">&#x27; &#x27;</span></span><br><span class="line">    cmd += <span class="string">&#x27;-j0 -o &#x27;</span> + logfile</span><br><span class="line">    thread = threading.Thread(target=readfile, args=(logfile,))</span><br><span class="line">    thread.start()</span><br><span class="line">    code = os.system(cmd)</span><br><span class="line">    runing = <span class="literal">False</span></span><br><span class="line">    thread.join()</span><br><span class="line">    sys.exit(code)</span><br></pre></td></tr></table></figure><p>此脚本需要结合VS Code的Task运行，通过配置Task，我们还需要匹配输出中的错误信息(编译错误)，实现在keil中，点击错误直接跳转到错误代码处，具体如何配置请参考VS Code的文档，这里给出我的Task</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // See https://go.microsoft.com/fwlink/?LinkId=<span class="number">733558</span></span><br><span class="line">    // <span class="keyword">for</span> the documentation about the tasks.json <span class="built_in">format</span></span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;2.0.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;tasks&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;label&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,</span><br><span class="line">            <span class="string">&quot;command&quot;</span>: <span class="string">&quot;py&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;E:/scripts/build.py&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-b&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;config:uvprojxPath&#125;&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;group&quot;</span>: &#123;</span><br><span class="line">                <span class="string">&quot;kind&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">                <span class="string">&quot;isDefault&quot;</span>: true</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">&quot;problemMatcher&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;fileLocation&quot;</span>: [<span class="string">&quot;relative&quot;</span>, <span class="string">&quot;$&#123;workspaceFolder&#125;/src/MDK-ARM&quot;</span>],</span><br><span class="line">                    <span class="string">&quot;pattern&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;regexp&quot;</span>: <span class="string">&quot;^(.*)\\((\\d+)\\):\\s+(warning|error):\\s+(.*):\\s+(.*)$&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;file&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;line&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                        <span class="string">&quot;severity&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                        <span class="string">&quot;code&quot;</span>: <span class="number">4</span>,</span><br><span class="line">                        <span class="string">&quot;message&quot;</span>: <span class="number">5</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;label&quot;</span>: <span class="string">&quot;rebuild&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,</span><br><span class="line">            <span class="string">&quot;command&quot;</span>: <span class="string">&quot;py&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;E:/scripts/build.py&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-r&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;config:uvprojxPath&#125;&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;group&quot;</span>: <span class="string">&quot;build&quot;</span>,</span><br><span class="line">            <span class="string">&quot;problemMatcher&quot;</span>: [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">                    <span class="string">&quot;fileLocation&quot;</span>: [<span class="string">&quot;relative&quot;</span>, <span class="string">&quot;$&#123;workspaceFolder&#125;/src/MDK-ARM&quot;</span>],</span><br><span class="line">                    <span class="string">&quot;pattern&quot;</span>: &#123;</span><br><span class="line">                        <span class="string">&quot;regexp&quot;</span>: <span class="string">&quot;^(.*)\\((\\d+)\\):\\s+(warning|error):\\s+(.*):\\s+(.*)$&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;file&quot;</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="string">&quot;line&quot;</span>: <span class="number">2</span>,</span><br><span class="line">                        <span class="string">&quot;severity&quot;</span>: <span class="number">3</span>,</span><br><span class="line">                        <span class="string">&quot;code&quot;</span>: <span class="number">4</span>,</span><br><span class="line">                        <span class="string">&quot;message&quot;</span>: <span class="number">5</span>,</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;label&quot;</span>: <span class="string">&quot;download&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;shell&quot;</span>,</span><br><span class="line">            <span class="string">&quot;command&quot;</span>: <span class="string">&quot;py&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;-3&quot;</span>,</span><br><span class="line">                <span class="string">&quot;E:/scripts/build.py&quot;</span>,</span><br><span class="line">                <span class="string">&quot;-f&quot;</span>,</span><br><span class="line">                <span class="string">&quot;$&#123;config:uvprojxPath&#125;&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;group&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;label&quot;</span>: <span class="string">&quot;open in keil&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;process&quot;</span>,</span><br><span class="line">            <span class="string">&quot;command&quot;</span>: <span class="string">&quot;$&#123;config:uvPath&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;args&quot;</span>: [</span><br><span class="line">                <span class="string">&quot;$&#123;config:uvprojxPath&#125;&quot;</span></span><br><span class="line">            ],</span><br><span class="line">            <span class="string">&quot;group&quot;</span>: <span class="string">&quot;test&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对于使用ARM Compiler 6编译的工程，build和rebuild中的problemMatcher应该配置为</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;problemMatcher&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">&quot;owner&quot;</span>: <span class="string">&quot;c&quot;</span>,</span><br><span class="line">        <span class="string">&quot;fileLocation&quot;</span>: [<span class="string">&quot;relative&quot;</span>, <span class="string">&quot;$&#123;workspaceFolder&#125;/MDK-ARM&quot;</span>],</span><br><span class="line">        <span class="string">&quot;pattern&quot;</span>: &#123;</span><br><span class="line">            <span class="string">&quot;regexp&quot;</span>: <span class="string">&quot;^(.*)\\((\\d+)\\):\\s+(warning|error):\\s+(.*)$&quot;</span>,</span><br><span class="line">            <span class="string">&quot;file&quot;</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="string">&quot;line&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;severity&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">&quot;message&quot;</span>: <span class="number">4</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>文件中的<code>config:uvPath</code>和<code>config:uvprojxPath</code>分别为keil的UV4.exe文件路径和工程路径(.uvprojx)，可以直接修改为具体路径，或者在VS Code的setting.json中增加对应的项</p><p>至此，我们已经完美实现了在VS Code中编辑，编译，下载了</p><blockquote><p>编译输出:</p><p><img src="https://s1.ax1x.com/2020/04/10/GIvGuR.png" alt="img_vscode_keil_complie.png"></p><p>有错误时输出：</p><p><img src="https://s1.ax1x.com/2020/04/10/GIvUUK.png" alt="img_vscode_keil_complie_error.png"></p><p>错误匹配：</p><p><img src="https://s1.ax1x.com/2020/04/10/GIvNE6.png" alt="img_vscode_keil_error_match.png"></p></blockquote><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><p>调试需要使用到Cortex-Debug插件，以及arm gcc工具链，这部分可以参考Cortex-Debug的文档，说的比较详细</p><p>首先安装Cortex-Debug插件和arm gcc工具链，然后配置好环境路径，如果使用Jlink调试，需要下载Jlink套件，安转好之后，找到<code>JLinkGDBServerCL.exe</code>这个程序，在VS Code的设置中添加<code>&quot;cortex-debug.JLinkGDBServerPath&quot;: &quot;C:/Program Files (x86)/SEGGER/JLink_V630f/JLinkGDBServerCL.exe&quot;</code>，后面的路径是你自己的路径。</p><p>如果使用STLink调试，需要下载stutil工具，在GitHub上搜索即可找到，同样配置好路径即可。</p><p>以上步骤弄好之后，可以直接点击VS Code的调试按钮，此时会新建luanch.json文件，这个文件就是VS Code的调试配置文件，可参考我的文件进行配置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // 使用 IntelliSense 了解相关属性。</span><br><span class="line">    // 悬停以查看现有属性的描述。</span><br><span class="line">    // 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=<span class="number">830387</span></span><br><span class="line">    <span class="string">&quot;version&quot;</span>: <span class="string">&quot;0.2.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;configurations&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Cortex Debug(JLINK)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;executable&quot;</span>: <span class="string">&quot;src/MDK-ARM/Objects/stm32_boot.axf&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;attach&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;cortex-debug&quot;</span>,</span><br><span class="line">            <span class="string">&quot;servertype&quot;</span>: <span class="string">&quot;jlink&quot;</span>,</span><br><span class="line">            <span class="string">&quot;device&quot;</span>: <span class="string">&quot;STM32F407IG&quot;</span>,</span><br><span class="line">            <span class="string">&quot;svdFile&quot;</span>: <span class="string">&quot;C:/Program Files (x86)/keil/ARM/PACK/Keil/STM32F4xx_DFP/2.11.0/CMSIS/SVD/STM32F40x.svd&quot;</span>,</span><br><span class="line">            <span class="string">&quot;interface&quot;</span>: <span class="string">&quot;swd&quot;</span>,</span><br><span class="line">            <span class="string">&quot;ipAddress&quot;</span>: null,</span><br><span class="line">            <span class="string">&quot;serialNumber&quot;</span>: null</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;name&quot;</span>: <span class="string">&quot;Cortex Debug(ST-LINK)&quot;</span>,</span><br><span class="line">            <span class="string">&quot;cwd&quot;</span>: <span class="string">&quot;$&#123;workspaceRoot&#125;&quot;</span>,</span><br><span class="line">            <span class="string">&quot;executable&quot;</span>: <span class="string">&quot;src/MDK-ARM/Objects/stm32_boot.axf&quot;</span>,</span><br><span class="line">            <span class="string">&quot;request&quot;</span>: <span class="string">&quot;attach&quot;</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;cortex-debug&quot;</span>,</span><br><span class="line">            <span class="string">&quot;servertype&quot;</span>: <span class="string">&quot;stutil&quot;</span>,</span><br><span class="line">            <span class="string">&quot;svdFile&quot;</span>: <span class="string">&quot;C:/Program Files (x86)/keil/ARM/PACK/Keil/STM32F4xx_DFP/2.11.0/CMSIS/SVD/STM32F40x.svd&quot;</span>,</span><br><span class="line">            <span class="string">&quot;device&quot;</span>: <span class="string">&quot;STM32F407IG&quot;</span>,</span><br><span class="line">            <span class="string">&quot;v1&quot;</span>: false</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意其中几个需要修改的地方，<code>executable</code>修改为你的工程生成的目标文件，也就是工程的<code>.axf</code>文件，<code>svdFile</code>用于对MCU外设的监控，该文件可以在keil的安装路径中找到，可以参考我的路径去找</p><p>配置完成后，再次点击调试按钮即可进行调试</p><blockquote><p><img src="https://s1.ax1x.com/2020/04/10/GIvYHx.png" alt="img_vscode_keil_debug.png"></p></blockquote><p>相比keil自己的调试功能，VS Code还支持条件断点，可以设置命中条件，次数等，可以极大的方便调试</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过以上的配置，我们基本上，除了建立工程和往工程中添加文件，其他完全不需要打开keil，所以也无妨说一句，再见，智障keil</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;在我刚开始接触STM32的时候，使用的keil作为IDE，由于在这之前，我使用过VS, 使用过eclipse, 因而在我使用keil之后，实在难以忍受keil编辑器简陋的功能，可以说是极其糟糕的写代码体验&lt;/p&gt;
&lt;p&gt;之后，我尝试过各种IDE，使用eclipse + keil，结果发现eclipse对C语言的支持也是鸡肋，使用emBits + gcc，需要和其他人协同的话就比较麻烦，之后发现了platformIO，也是使用gcc作为编译器，不过只支持HAL库&lt;/p&gt;
&lt;p&gt;最后，通过使用VS Code + keil的方式，完美解决了写代码的体验问题，以及工程协作问题&lt;/p&gt;</summary>
    
    
    
    <category term="嵌入式" scheme="http://nevermindzzt.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="http://nevermindzzt.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="STM32" scheme="http://nevermindzzt.github.io/tags/STM32/"/>
    
    <category term="VS Code" scheme="http://nevermindzzt.github.io/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>在嵌入式系统中实现简单的shell</title>
    <link href="http://nevermindzzt.github.io/2018/07/15/%E5%9C%A8%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84shell/"/>
    <id>http://nevermindzzt.github.io/2018/07/15/%E5%9C%A8%E5%B5%8C%E5%85%A5%E5%BC%8F%E7%B3%BB%E7%BB%9F%E4%B8%AD%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%9A%84shell/</id>
    <published>2018-07-14T16:00:00.000Z</published>
    <updated>2020-07-07T04:56:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于嵌入式系统而言，特别对于没有使用操作系统，裸机运行程序的嵌入式系统，如何高效便捷的进行系统调试往往是一个比较令人头疼的问题。不久前，我接触到一个国产嵌入式操作系统，Thread RTOS，其中，该系统集成的finsh shell工具让我有种眼前一亮的感觉，它将shell工具引入到嵌入式系统中，极大的方便了系统的调试。</p><p>然而，finsh shell运行在操作系统之上，体积也比较大，对于某些小型嵌入式设备，基本是与其无缘了，既然如此，我们为何不自己编写一个shell呢。</p><span id="more"></span><p>我们首先对shell的运行原理进行分析，通过在命令行输入命令，shell对命令进行解析，然后执行相应的操作，更通俗的，就是使用输入的字符串，匹配到对应的函数，然后执行。那么，我们需要建立一个命令-函数的一一对应的关系，定义结构体。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">uint8_t</span> *name;                                              <span class="comment">//shell命令名称</span></span><br><span class="line">    shellFunction function;                                     <span class="comment">//shell命令函数</span></span><br><span class="line">    <span class="type">uint8_t</span> *desc;                                              <span class="comment">//shell命令描述</span></span><br><span class="line">&#125;SHELL_CommandTypeDef;                                          <span class="comment">//shell命令定义</span></span><br></pre></td></tr></table></figure><p>其中，shellFunction为函数指针类型，定义为</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span> <span class="params">(*shellFunction)</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure><p>有了定义之后，我们建立一个表，将所有的命令以及对应的函数进行声明</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* shell 命令表，使用 &#123;command, function, description&#125; 的格式添加命令</span></span><br><span class="line"><span class="comment">* 其中</span></span><br><span class="line"><span class="comment">* command   为命令，字符串格式，长度不能超过 SHELL_PARAMETER_MAX_LENGTH</span></span><br><span class="line"><span class="comment">*           若不使用带参命令，则长度不超过SHELL_COMMAND_MAX_LENGTH</span></span><br><span class="line"><span class="comment">* function  为该命令调用的函数，支持(void *)(void)类型的无参函数以及与带参主函数</span></span><br><span class="line"><span class="comment">*           类似的(void *)(uint32_t argc, uint8_t *argv[])类型的带参函数，其中，</span></span><br><span class="line"><span class="comment">*           argc 为参数个数，argv 为参数，参数皆为字符串格式，需自行进行数据转换</span></span><br><span class="line"><span class="comment">* description 为对命令的描述，字符串格式</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="type">const</span> SHELL_CommandTypeDef shellCommandList[] =</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/*command               function                description*/</span></span><br><span class="line">    &#123;(<span class="type">uint8_t</span> *)<span class="string">&quot;letter&quot;</span>,   shellLetter,            (<span class="type">uint8_t</span> *)<span class="string">&quot;letter shell&quot;</span>&#125;,</span><br><span class="line">    &#123;(<span class="type">uint8_t</span> *)<span class="string">&quot;reboot&quot;</span>,   shellReboot,            (<span class="type">uint8_t</span> *)<span class="string">&quot;reboot system&quot;</span>&#125;,</span><br><span class="line">    &#123;(<span class="type">uint8_t</span> *)<span class="string">&quot;help&quot;</span>,     shellShowCommandList,   (<span class="type">uint8_t</span> *)<span class="string">&quot;show command list&quot;</span>&#125;,</span><br><span class="line">    &#123;(<span class="type">uint8_t</span> *)<span class="string">&quot;clear&quot;</span>,    shellClear,             (<span class="type">uint8_t</span> *)<span class="string">&quot;clear command line&quot;</span>&#125;,</span><br><span class="line">    &#123;(<span class="type">uint8_t</span> *)<span class="string">&quot;iap&quot;</span>,      iapMain,                (<span class="type">uint8_t</span> *)<span class="string">&quot;iap&quot;</span>&#125;,</span><br><span class="line">    &#123;(<span class="type">uint8_t</span> *)<span class="string">&quot;tftp&quot;</span>,     iapTftp,                (<span class="type">uint8_t</span> *)<span class="string">&quot;start TFTP server&quot;</span>&#125;,</span><br><span class="line">    &#123;(<span class="type">uint8_t</span> *)<span class="string">&quot;userApp&quot;</span>,  iapJumpToApplication,   (<span class="type">uint8_t</span> *)<span class="string">&quot;run user application&quot;</span>&#125;,</span><br><span class="line">    &#123;(<span class="type">uint8_t</span> *)<span class="string">&quot;erase&quot;</span>,    (<span class="built_in">void</span> (*)())iapErase,   (<span class="type">uint8_t</span> *)<span class="string">&quot;erase user application&quot;</span>&#125;,</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> SHELL_USE_PARAMETER == 1    <span class="comment">/*带参函数命令*/</span></span></span><br><span class="line">    &#123;(<span class="type">uint8_t</span> *)<span class="string">&quot;paraTest&quot;</span>, (<span class="built_in">void</span> (*)())shellParaTest, (<span class="type">uint8_t</span> *)<span class="string">&quot;test parameter&quot;</span>&#125;,</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后，我们只需要获得输入的命令，并将其和命令表中的命令进行匹配，然后执行相应的函数即可，完整代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*******************************************************************************</span></span><br><span class="line"><span class="comment">*@function  shellHandler</span></span><br><span class="line"><span class="comment">*@brief     shell处理函数</span></span><br><span class="line"><span class="comment">*@param     receiveData     接收到的数据</span></span><br><span class="line"><span class="comment">*@retval    None</span></span><br><span class="line"><span class="comment">*@author    Letter</span></span><br><span class="line"><span class="comment">*@note      此函数被shellMain函数调用，若使用shellMain阻塞式运行shell，直接调用</span></span><br><span class="line"><span class="comment">*           shellMain函数即可，但不建议这样做，建议在无操作系统情况下，在shell</span></span><br><span class="line"><span class="comment">*           输入触发的中断中调用此函数（通常为串口中断），此时无需调用shellMain，</span></span><br><span class="line"><span class="comment">*           shell也为非阻塞式，操作系统情况下，通常将此函数交给shell输入设备的</span></span><br><span class="line"><span class="comment">*           任务处理</span></span><br><span class="line"><span class="comment">*******************************************************************************/</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">shellHandler</span><span class="params">(<span class="type">uint8_t</span> receiveData)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">static</span> <span class="type">uint8_t</span> runFlag;</span><br><span class="line">    <span class="type">static</span> CONTROL_Status controlFlag = CONTROL_FREE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">switch</span> (receiveData)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\r&#x27;</span>:</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\n&#x27;</span>:</span><br><span class="line">            <span class="keyword">if</span> (shellCommandFlag &gt;= SHELL_COMMAND_MAX_LENGTH - <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">shellDisplay</span>(<span class="string">&quot;\r\nError: Command is too long\r\n&quot;</span>);</span><br><span class="line">                shellCommandBuff[shellCommandFlag] = <span class="number">0</span>;</span><br><span class="line">                shellCommandFlag = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">shellDisplay</span>(SHELL_COMMAND);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (shellCommandFlag == <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">shellDisplay</span>(SHELL_COMMAND);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                shellCommandBuff[shellCommandFlag++] = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> SHELL_USE_PARAMETER == 1</span></span><br><span class="line">                commandCount = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="type">uint8_t</span> j = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int8_t</span> i = <span class="number">0</span>; i &lt; shellCommandFlag; i++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (shellCommandBuff[i] != <span class="string">&#x27; &#x27;</span> &amp;&amp;</span><br><span class="line">                        shellCommandBuff[i] != <span class="string">&#x27;\t&#x27;</span> &amp;&amp;</span><br><span class="line">                        shellCommandBuff[i] != <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        commandPara[commandCount][j++] = shellCommandBuff[i];</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="keyword">if</span> (j != <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            commandPara[commandCount][j] = <span class="number">0</span>;</span><br><span class="line">                            commandCount ++;</span><br><span class="line">                            j = <span class="number">0</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                shellCommandFlag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (commandCount == <span class="number">0</span>)                      <span class="comment">//是否为无效指令</span></span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">shellDisplay</span>(SHELL_COMMAND);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> SHELL_USE_HISTORY ==1</span></span><br><span class="line">                <span class="built_in">shellStringCopy</span>(shellHistoryCommand[shellHistoryFlag++], shellCommandBuff);</span><br><span class="line">                <span class="keyword">if</span> (++shellHistoryCount &gt; SHELL_HISTORY_MAX_NUMBER)</span><br><span class="line">                &#123;</span><br><span class="line">                    shellHistoryCount = SHELL_HISTORY_MAX_NUMBER;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (shellHistoryFlag &gt;= SHELL_HISTORY_MAX_NUMBER)</span><br><span class="line">                &#123;</span><br><span class="line">                    shellHistoryFlag = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                shellHistoryOffset = <span class="number">0</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">                <span class="built_in">shellDisplay</span>(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">                runFlag = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int8_t</span> i = <span class="built_in">sizeof</span>(shellCommandList) / <span class="built_in">sizeof</span>(SHELL_CommandTypeDef) - <span class="number">1</span>;</span><br><span class="line">                     i &gt;=  <span class="number">0</span>; i--)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">strcmp</span>((<span class="type">const</span> <span class="type">char</span> *)commandPara[<span class="number">0</span>],</span><br><span class="line">                        (<span class="type">const</span> <span class="type">char</span> *)shellCommandList[i].name) == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        runFlag = <span class="number">1</span>;</span><br><span class="line">                        shellCommandList[i].<span class="built_in">function</span>(commandCount, commandPointer);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">else</span> <span class="comment">/*SHELL_USE_PARAMETER == 1*/</span></span></span><br><span class="line"></span><br><span class="line">                shellCommandBuff[shellCommandFlag] = <span class="number">0</span>;</span><br><span class="line">                shellCommandFlag = <span class="number">0</span>;</span><br><span class="line">                <span class="built_in">shellDisplay</span>(<span class="string">&quot;\r\n&quot;</span>);</span><br><span class="line">                runFlag = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int8_t</span> i = <span class="built_in">sizeof</span>(shellCommandList) / <span class="built_in">sizeof</span>(SHELL_CommandTypeDef) - <span class="number">1</span>;</span><br><span class="line">                     i &gt;=  <span class="number">0</span>; i--)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="built_in">strcmp</span>((<span class="type">const</span> <span class="type">char</span> *)shellCommandBuff,</span><br><span class="line">                        (<span class="type">const</span> <span class="type">char</span> *)shellCommandList[i].name) == <span class="number">0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        runFlag = <span class="number">1</span>;</span><br><span class="line">                        shellCommandList[i].<span class="built_in">function</span>();</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">/*SHELL_USE_PARAMETER == 1*/</span></span></span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (runFlag == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="built_in">shellDisplay</span>(<span class="string">&quot;Command not found&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">shellDisplay</span>(SHELL_COMMAND);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x08</span>:                                          <span class="comment">//退格</span></span><br><span class="line">            <span class="keyword">if</span> (shellCommandFlag != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                shellCommandFlag--;</span><br><span class="line">                <span class="built_in">shellBackspace</span>(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;\t&#x27;</span>:                                          <span class="comment">//制表符</span></span><br><span class="line">        <span class="meta">#<span class="keyword">if</span> SHELL_USE_HISTORY == 1</span></span><br><span class="line">            <span class="keyword">if</span> (shellHistoryCount != <span class="number">0</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">shellBackspace</span>(shellCommandFlag);</span><br><span class="line">                shellCommandFlag = <span class="built_in">shellStringCopy</span>(shellCommandBuff,</span><br><span class="line">                                   shellHistoryCommand[(shellHistoryFlag + SHELL_HISTORY_MAX_NUMBER - <span class="number">1</span>)</span><br><span class="line">                                                        % SHELL_HISTORY_MAX_NUMBER]);</span><br><span class="line">                <span class="built_in">shellDisplay</span>(shellCommandBuff);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>                                            <span class="comment">//无历史命令，输入help</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">shellBackspace</span>(shellCommandFlag);</span><br><span class="line">                shellCommandFlag = <span class="number">4</span>;</span><br><span class="line">                <span class="built_in">shellStringCopy</span>(shellCommandBuff, (<span class="type">uint8_t</span> *)<span class="string">&quot;help&quot;</span>);</span><br><span class="line">                <span class="built_in">shellDisplay</span>(shellCommandBuff);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">case</span> <span class="number">0x1B</span>:                                          <span class="comment">//控制键</span></span><br><span class="line">            controlFlag = CONTROL_STEP_ONE;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">            <span class="keyword">switch</span> ((<span class="type">uint8_t</span>)controlFlag)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">case</span> CONTROL_STEP_TWO:</span><br><span class="line">                    <span class="keyword">if</span> (receiveData == <span class="number">0x41</span>)                <span class="comment">//方向上键</span></span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="meta">#<span class="keyword">if</span> SHELL_USE_HISTORY == 1</span></span><br><span class="line">                        <span class="built_in">shellBackspace</span>(shellCommandFlag);</span><br><span class="line">                        <span class="keyword">if</span> (shellHistoryOffset--</span><br><span class="line">                            &lt;= -((shellHistoryCount &gt; shellHistoryFlag)</span><br><span class="line">                                ? shellHistoryCount : shellHistoryFlag))</span><br><span class="line">                        &#123;</span><br><span class="line">                            shellHistoryOffset</span><br><span class="line">                            = -((shellHistoryCount &gt; shellHistoryFlag)</span><br><span class="line">                                ? shellHistoryCount : shellHistoryFlag);</span><br><span class="line">                        &#125;</span><br><span class="line">                        shellCommandFlag = <span class="built_in">shellStringCopy</span>(shellCommandBuff,</span><br><span class="line">                            shellHistoryCommand[(shellHistoryFlag + SHELL_HISTORY_MAX_NUMBER</span><br><span class="line">                                                 + shellHistoryOffset) % SHELL_HISTORY_MAX_NUMBER]);</span><br><span class="line">                        <span class="built_in">shellDisplay</span>(shellCommandBuff);</span><br><span class="line">                    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">                        <span class="comment">//shellDisplay(&quot;up\r\n&quot;);</span></span><br><span class="line">                    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (receiveData == <span class="number">0x42</span>)           <span class="comment">//方向下键</span></span><br><span class="line">                    &#123;</span><br><span class="line">                    <span class="meta">#<span class="keyword">if</span> SHELL_USE_HISTORY == 1</span></span><br><span class="line">                        <span class="keyword">if</span> (++shellHistoryOffset &gt;= <span class="number">0</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            shellHistoryOffset = <span class="number">-1</span>;</span><br><span class="line">                            <span class="keyword">break</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="built_in">shellBackspace</span>(shellCommandFlag);</span><br><span class="line">                        shellCommandFlag = <span class="built_in">shellStringCopy</span>(shellCommandBuff,</span><br><span class="line">                            shellHistoryCommand[(shellHistoryFlag + SHELL_HISTORY_MAX_NUMBER</span><br><span class="line">                                                 + shellHistoryOffset) % SHELL_HISTORY_MAX_NUMBER]);</span><br><span class="line">                        <span class="built_in">shellDisplay</span>(shellCommandBuff);</span><br><span class="line">                    <span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">                        <span class="comment">//shellDisplay(&quot;down\r\n&quot;);</span></span><br><span class="line">                    <span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (receiveData == <span class="number">0x43</span>)           <span class="comment">//方向右键</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//shellDisplay(&quot;right\r\n&quot;);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span> (receiveData == <span class="number">0x44</span>)           <span class="comment">//方向左键</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        <span class="comment">//shellDisplay(&quot;left\r\n&quot;);</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        controlFlag = CONTROL_FREE;</span><br><span class="line">                        <span class="keyword">goto</span> normal;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> CONTROL_STEP_ONE:</span><br><span class="line">                    <span class="keyword">if</span> (receiveData == <span class="number">0x5B</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        controlFlag = CONTROL_STEP_TWO;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        controlFlag = CONTROL_FREE;</span><br><span class="line">                        <span class="keyword">goto</span> normal;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">case</span> CONTROL_FREE:                          <span class="comment">//正常按键处理</span></span><br><span class="line">normal:             <span class="keyword">if</span> (shellCommandFlag &lt; SHELL_COMMAND_MAX_LENGTH - <span class="number">1</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        shellCommandBuff[shellCommandFlag++] = receiveData;</span><br><span class="line">                        <span class="built_in">shellDisplayByte</span>(receiveData);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        shellCommandFlag++;</span><br><span class="line">                        <span class="built_in">shellDisplayByte</span>(receiveData);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用串口进行命令的输入和输出，在输入命令并回车之后，程序解析命令，根据空格将输入分开为命令和参数，对命令进行匹配，匹配到命令之后，执行函数。</p><p>完整代码之后会同步到github。</p><p>end</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;对于嵌入式系统而言，特别对于没有使用操作系统，裸机运行程序的嵌入式系统，如何高效便捷的进行系统调试往往是一个比较令人头疼的问题。不久前，我接触到一个国产嵌入式操作系统，Thread RTOS，其中，该系统集成的finsh shell工具让我有种眼前一亮的感觉，它将shell工具引入到嵌入式系统中，极大的方便了系统的调试。&lt;/p&gt;
&lt;p&gt;然而，finsh shell运行在操作系统之上，体积也比较大，对于某些小型嵌入式设备，基本是与其无缘了，既然如此，我们为何不自己编写一个shell呢。&lt;/p&gt;</summary>
    
    
    
    <category term="letter shell" scheme="http://nevermindzzt.github.io/categories/letter-shell/"/>
    
    
    <category term="嵌入式" scheme="http://nevermindzzt.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="STM32" scheme="http://nevermindzzt.github.io/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>一种不依赖计时器的键盘长按，双击实现</title>
    <link href="http://nevermindzzt.github.io/2018/04/07/%E4%B8%80%E7%A7%8D%E4%B8%8D%E4%BE%9D%E8%B5%96%E8%AE%A1%E6%97%B6%E5%99%A8%E7%9A%84%E9%94%AE%E7%9B%98%E9%95%BF%E6%8C%89%EF%BC%8C%E5%8F%8C%E5%87%BB%E5%AE%9E%E7%8E%B0/"/>
    <id>http://nevermindzzt.github.io/2018/04/07/%E4%B8%80%E7%A7%8D%E4%B8%8D%E4%BE%9D%E8%B5%96%E8%AE%A1%E6%97%B6%E5%99%A8%E7%9A%84%E9%94%AE%E7%9B%98%E9%95%BF%E6%8C%89%EF%BC%8C%E5%8F%8C%E5%87%BB%E5%AE%9E%E7%8E%B0/</id>
    <published>2018-04-06T16:00:00.000Z</published>
    <updated>2020-07-07T04:56:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>前面一段时间在考虑矩阵键盘的驱动方式，其中，在按键长按这个点上，网上的好多思路都是建立在计时器计时和中断的基础上的，那么，能不能再不用中断和计时器的情况下，实现按键的长按和双击的判断呢。</p><p>在判断按键被按下之后，如果我们对按键释放的时间进行计时，就可以实现按键长按的判断了。建立在这个基础上，如果我们在按键释放之后，延时一段时间再一次判断同一个按键是不是被释放，是不是就可以实现双击的判断了。</p><span id="more"></span><p>有了思路之后，代码实现就比较容易了。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">uint8_t</span> <span class="title function_">KEY_Scan</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">uint8_t</span> lastKeyValue;                                <span class="comment">//记录上次键值，放置连按触发</span></span><br><span class="line"><span class="type">uint16_t</span> count;</span><br><span class="line"><span class="type">uint8_t</span> i;</span><br><span class="line"><span class="type">uint8_t</span> scanData = <span class="number">0</span>;</span><br><span class="line"><span class="type">uint8_t</span> keyValue = <span class="number">0</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">uint8_t</span> writeData[] = &#123;<span class="number">0x0E</span>, <span class="number">0x0D</span>, <span class="number">0x0B</span>, <span class="number">0x07</span>&#125;;</span><br><span class="line"></span><br><span class="line">KEY_Write(<span class="number">0x00</span>);                                            <span class="comment">//写键盘列</span></span><br><span class="line">count = <span class="number">10000</span>;</span><br><span class="line"><span class="keyword">while</span>((KEY_Read() == <span class="number">0x0F</span>) &amp;&amp; (count != <span class="number">0</span>))                 <span class="comment">//等待键盘按下，10ms超时</span></span><br><span class="line">&#123;</span><br><span class="line">delay_us(<span class="number">1</span>);</span><br><span class="line">count--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (count == <span class="number">0</span>)                                             <span class="comment">//若等待超时，按键无效</span></span><br><span class="line">&#123;</span><br><span class="line">lastKeyValue = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">delay_ms(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)                                     <span class="comment">//按列扫描</span></span><br><span class="line">&#123;</span><br><span class="line">KEY_Write(writeData[i]);                                <span class="comment">//写列数据</span></span><br><span class="line">delay_us(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">switch</span> (KEY_Read())                                     <span class="comment">//读行数据并处理</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0E</span>:</span><br><span class="line">scanData += <span class="number">1</span>;</span><br><span class="line">keyValue = scanData;                            <span class="comment">//记录键值</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0D</span>:</span><br><span class="line">scanData += <span class="number">2</span>;</span><br><span class="line">keyValue = scanData;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0x0B</span>:</span><br><span class="line">scanData += <span class="number">3</span>;</span><br><span class="line">keyValue = scanData;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">0x07</span>:</span><br><span class="line">scanData += <span class="number">4</span>;</span><br><span class="line">keyValue = scanData;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">scanData += <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (keyValue == <span class="number">0</span>)                                          <span class="comment">//若无按键按下，返回</span></span><br><span class="line">&#123;</span><br><span class="line">lastKeyValue = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> keyValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">KEY_Write(<span class="number">0x00</span>);                                            <span class="comment">//列全写0</span></span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((KEY_Read() != <span class="number">0x0F</span>) &amp;&amp; count &lt; KEY_LONG_PRESS_MAX_TIME) <span class="comment">//读行键值，若有按键按下则计时</span></span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">delay_ms(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (count &gt; KEY_SHORT_PRESS_MAX_TIME)                       <span class="comment">//若计时超过KEY_SHORT_PRESS_MAX_TIME，为长按</span></span><br><span class="line">&#123;</span><br><span class="line">keyValue += <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span>KEY_DOUBLE_CLICK                                        <span class="comment">//双击</span></span></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">delay_ms(KEY_DOUBLE_CLICK_DELAY);                       <span class="comment">//延时一段时间，等待双击的第二次按下</span></span><br><span class="line">KEY_Write(writeData[(keyValue - <span class="number">1</span>) / <span class="number">4</span>]);</span><br><span class="line">delay_us(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (KEY_Read() == writeData[(keyValue - <span class="number">1</span>) % <span class="number">4</span>])        <span class="comment">//若读取到的按键和第一次按下的键值一样，为双击</span></span><br><span class="line">&#123;</span><br><span class="line">keyValue += <span class="number">40</span>;</span><br><span class="line">delay_ms(<span class="number">10</span>);</span><br><span class="line">KEY_Write(<span class="number">0x00</span>);</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((KEY_Read() != <span class="number">0x0F</span>) &amp;&amp; count &lt; <span class="number">500</span>)         <span class="comment">//等待按键释放</span></span><br><span class="line">&#123;</span><br><span class="line">count++;</span><br><span class="line">delay_ms(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ((lastKeyValue == keyValue) || (lastKeyValue == keyValue + <span class="number">20</span>) || (lastKeyValue == keyValue <span class="number">-20</span>))    <span class="comment">//防止连按触发</span></span><br><span class="line">&#123;</span><br><span class="line">keyValue = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">lastKeyValue = keyValue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> keyValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>end</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;前面一段时间在考虑矩阵键盘的驱动方式，其中，在按键长按这个点上，网上的好多思路都是建立在计时器计时和中断的基础上的，那么，能不能再不用中断和计时器的情况下，实现按键的长按和双击的判断呢。&lt;/p&gt;
&lt;p&gt;在判断按键被按下之后，如果我们对按键释放的时间进行计时，就可以实现按键长按的判断了。建立在这个基础上，如果我们在按键释放之后，延时一段时间再一次判断同一个按键是不是被释放，是不是就可以实现双击的判断了。&lt;/p&gt;</summary>
    
    
    
    <category term="嵌入式" scheme="http://nevermindzzt.github.io/categories/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    
    <category term="嵌入式" scheme="http://nevermindzzt.github.io/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"/>
    
    <category term="STM32" scheme="http://nevermindzzt.github.io/tags/STM32/"/>
    
  </entry>
  
  <entry>
    <title>解决Visio“操作系统当前的配置无法运行此程序”问题</title>
    <link href="http://nevermindzzt.github.io/2018/03/07/%E8%A7%A3%E5%86%B3Visio2016%E2%80%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BD%93%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E6%AD%A4%E7%A8%8B%E5%BA%8F%E2%80%9D%E9%97%AE%E9%A2%98/"/>
    <id>http://nevermindzzt.github.io/2018/03/07/%E8%A7%A3%E5%86%B3Visio2016%E2%80%9C%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%BD%93%E5%89%8D%E7%9A%84%E9%85%8D%E7%BD%AE%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8C%E6%AD%A4%E7%A8%8B%E5%BA%8F%E2%80%9D%E9%97%AE%E9%A2%98/</id>
    <published>2018-03-06T16:00:00.000Z</published>
    <updated>2020-07-07T04:56:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于要写论文的原因，需要用到流程图，于是想装一个Visio用用。从下载Visio镜像到安装完成，一切都很顺利，但是安装完成之后打开，竟然提示“操作系统的当前配置无法运行此程序”，表示一脸懵逼…</p><span id="more"></span><p>在网上搜索找到很多说法，包括改注册表什么的，都没有成功。后面发现，office2016和Visio的镜像其实是一样的，只不过里面的setup.exe不同，于是替换Visio镜像的setup到解压后的office镜像中，在这里安装，然后就安装成功了。</p><p>个人猜测应该是两个镜像之间的微小差别导致的不兼容，有同样问题的可以试试这个方案。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于要写论文的原因，需要用到流程图，于是想装一个Visio用用。从下载Visio镜像到安装完成，一切都很顺利，但是安装完成之后打开，竟然提示“操作系统的当前配置无法运行此程序”，表示一脸懵逼…&lt;/p&gt;</summary>
    
    
    
    
    <category term="office" scheme="http://nevermindzzt.github.io/tags/office/"/>
    
    <category term="Software" scheme="http://nevermindzzt.github.io/tags/Software/"/>
    
  </entry>
  
</feed>
